'use strict'
const level       = require('level-browserify')
// const level       = require('memdb')
const sub         = require('level-sublevel')
// @TODO: add level-switchboard && level-subtrack
// const tracker     = require('level-subtrack')
// @TODO: add virtualDown?
// const package     = require('findup-package-json').sync({
//   // @TODO: add esova package json info to leveldb
//   fields: ['name', 'version']
// })
// add to package.json => "findup-package-json",

/******************************************************************************
  CUSTOM
******************************************************************************/
// const version     = package.pkg.version
// const name        = package.pkg.name
// const NAME        = '/' + name + '/' + version + '/'
const NAME        = 'data.db'
var DB            = undefined
var APP           = undefined
var SDB           = undefined
level(NAME, function (err, db) {
  if (err) throw err
  DB = db
  SDB = sub(db)
  if (APP) APP()
})
// @TODO: ADD HOOKS
// https://www.npmjs.com/package/level-hooks
// @TODO: CHECK CONDITIONS
// https://www.npmjs.com/package/level-condition

/******************************************************************************
  MAIN
******************************************************************************/
module.exports  = db

function db (batch, opts, appCallback) {
  if (APP) throw new Error('already initialized')
  APP = function start () {
    populateDB(batch, opts, function callback (error) {
      if (error) appCallback(error)
      else appCallback(null, SDB)
    })
  }
  if (SDB) APP()
}
/******************************************************************************
  HELPER - populateDB
******************************************************************************/
function populateDB (batch, opts, callback) {
  try { localStorage.clear() }
  catch (e) { return callback(e) }
  DB.close(function (error) {
    if (error) return callback(error)
    setTimeout(function () {
      var req = indexedDB.deleteDatabase('IDBWrapper-'+NAME)
      req.onblocked = callback
      req.onerror = callback
      req.onsuccess = function (event) {
        DB.open(function (error) {
          if (error) return callback(error)
          // opts.force === true // OVERWRITE
          // @TODO: how to do this nicely?
          // opts.testKeys // if they exist, don't overwrite?
          DB.batch(batch, function (error) {
            if (error) callback(error)
            else setTimeout(callback, 0)
          })
        })
      }
    },0)
  })
}
///////////////////////////////////////////////////////////////////////////////
// var STATE = ud.defonce(module, function initialize (){
// var state = {
//     /************************************************************************
//       UPDATE VIEW through NAVIGATION => shift perspective
//     ************************************************************************/
//     route     : {},
//     /************************************************************************
//       UPDATE VIEW through ACTIONS => shift content
//     ************************************************************************/
//     action    : function action (name, state) {
//       console.log('Action: ', name)
//       ENGINE.update(state)
//     },
//     submenu   : [{
//       link  : '/#products/innovation',
//       name  : 'Innovation'
//     },{
//       link  : '/#products/transformation',
//       name  : 'Transformation'
//     },{
//       link  : '/#products/digital-leadership',
//       name  : 'Digital Leadership Program'
//     },{
//       link  : '/#products/female-leadership',
//       name  : 'Female Leadership Experience'
//     },{
//       link  : '/#products/leadership-program',
//       name  : 'Women in Leadership Program'
//     }]
//   }
//   return state
// }, 'STATE')
