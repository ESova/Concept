'use strict'
/******************************************************************************
  STACK BASE
******************************************************************************/
const { h, hsvg } = require('_h')
const s           = require('_s')
/******************************************************************************
  CUSTOM
******************************************************************************/
const notFound    = require('_vcs-404')
/******************************************************************************
  MAIN
******************************************************************************/
module.exports = RootComponent

function RootComponent (db, engine) {


  /*****************************/
  // THEME + LOCAL CACHE + DEFAULT VALUES
  var REGISTERED    = false


  /*****************************/
  // INITIALIZE STYLING
  // ...


  /*****************************/
  // CHILD COMPONENTS & USED MODULES
  // @IDEA:
  // - child components have db listeners to act on
  // - parents inform world with db.put
  // IF: a parent requires a child, it for sure would like that child
  //     to act on certain actions and would like to learn about child actions
  // BECAUSE: without the direct "require" db.put/db.on communication would work
  // BUT: the "require" happens, because the parent outsources functionality
  // SO: how to auto-wire PARENT/CHILD after reqire?
  // ANSWER1: the child returns something (function OR object) as API
  // => parent needs to use API to tell child
  // => child uses API call from parent to return something
  // ANSWER2: parent alrady passes a customized db object to child
  // => whenever child "subscribes" or "puts", the parent can notice
  // => so parent can send to child & listen to child
  //   => thats important, because parent oursources
  // ....
  var renderMainPage = mainpage(db, engine)
  var renderNotFound = notFound(db, engine)


  /*****************************/
  // RENDER COMPONENT
  function render (error, update) {
    if (error) {
      var e = { name: error.name, message: error.message, stack: error.stack }
      db.put('ERROR', JSON.stringify(e, null, 2), function noop (err) { })
    }
    else renderMainPage()
  }


  /*****************************/
  // INCOMING COMMUNICATION CHANNELS
  if(REGISTERED) throw new Error ('this should never happen!')
  if (!REGISTERED) { // @HACK - why? what to do? wtf? :-)
    REGISTERED = true
    console.error('=== Global db listener activated! === ')
    db.on('put', function (key, value) {
      // @TODO MY CURRENT THOUGHTS
      // EVENT / STATUS / ACTION proxy
      // all actions/status/event from all components are intercepted here
      // and routed to the interested components
      //
      // @IDEA MY VISION THOUGHTS
      // once components specify "requirements" or support for "component queries" exists, they can also communicate directly with other components - but until then, hard coding might break stuff + users dont necessarily know what other component need to be present in the DOM for one component in order to work
      var val
      try { val = JSON.parse(value) } catch (e) { val = value }
      console.log('==============================')
      console.log('DB ACTIVITY: ', key, val)
      console.log('==============================')
      if (key === 'target') {
        console.error('!!!! target !!!!!')
        debugger
        // render()// @TODO: is a re-render here necessary?
      } else if (key === 'ERROR') {
        console.log('=====ERROR ORIGIN=====')
        console.log(value)
        console.log('=====ERROR ORIGIN=====')
      }
    })
  }


  /*****************************/
  // INITIALIZE
  console.log('--------------------------------')
  console.log('INITIALIZE: esova:RootComponent() component')
  console.log('--------------------------------')
  // @NOTE render() is triggered by router and pushes changes to engine$
  //       - can be triggered by others too
  // @TODO: render might be part of returned API of components if needed
  // @TODO: if not: remove render from component API
  // @TODO currently only used by raynos routes module
  // mainpage pushes to main engine to replace the whole site with error page
  // is currently only triggered by router and every time router navigates
  // to the routes that references "mainpage"
  return render
  // render() // because currently done by raynos router


  /*****************************/
  // HELPER
  // ...


}
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// 'use strict'
/******************************************************************************
  STACK BASE
******************************************************************************/
// var { h, hsvg } = require('_h')
// var s           = require('_s')
/******************************************************************************
  MAIN
******************************************************************************/
// module.exports = footer

function footer (db, engine) {


  /*****************************/
  // THEME + LOCAL CACHE + DEFAULT VALUES
  // ...


  /*****************************/
  // INITIALIZE STYLING
  // ...


  /*****************************/
  // CHILD COMPONENTS & USED MODULES
  // ...


  /*****************************/
  // RENDER COMPONENT
  // ...


  /*****************************/
  // INCOMING COMMUNICATION CHANNELS
  // ...


  /*****************************/
  // INITIALIZE
  console.log('--------------------------------')
  console.log('INITIALIZE: footer() component')
  console.log('--------------------------------')
  engine.push({
    type: 'vtree',
    key: 'footer',
    value: ''
  })
  return undefined

  /*****************************/
  // HELPER
  // ...


}
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// 'use strict'
/******************************************************************************
  STACK BASE
******************************************************************************/
// var { h, hsvg } = require('_h')
// var s           = require('_s')
/******************************************************************************
  CUSTOM
******************************************************************************/
const header      = require('_vcs-header')
const skillbox    = require('_vcs-skilltree/skillbox')
const promocode   = require('_vcs-promocode')
/******************************************************************************
  MAIN
******************************************************************************/
// module.exports = mainpage

function mainpage (db, engine) {


  /*****************************/
  // THEME + LOCAL CACHE + DEFAULT VALUES
  var VTREE = {
    header: '',
    content: '',
    footer: '',
    overlay: ''
  }
  var STATUS = {
    // UI STATUS
    inactive: undefined
  }


  /*****************************/
  // INITIALIZE STYLING
  var x = s(`
    app {
      min-height: 100vh;
      background-color: red;
    }
    esova--inactive {
      filter: blur(2px);
      -webkit-filter: blur(2px);
      background-color: red;
    }
    esova {
      position: relative;
      display: flex;
      flex-direction: column;
      min-height: 100vh;
      width: 100%;
      background-color: ${'#526E96'};
    }
    header {
      min-height: 165px;
    }
    content {
      display: flex;
      flex-direction: row;
      justify-content: center;
      align-items: stretch;
      flex-grow: 1;
    }
    footer {
      min-height: 165px;
    }
  `)


  /*****************************/
  // CHILD COMPONENTS & USED MODULES
  // @TODO
  // let them return stream$s that can be passed into hyperscript
  // so the custom VTREE CACHING becomes obsolete :-)
  promocode(db, { push: renderMainPage }) // show popup
  header(db, { push: renderMainPage })
  skillbox(db, { push: renderMainPage })
  footer(db, { push: renderMainPage })


  /*****************************/
  // RENDER COMPONENT
  function renderMainPage (/*error,*/ update) {
    var childTree = (update||{}).value
    var childName = (update||{}).key
    // MAYBE UPDATE CHILDREN
    if (childName === 'skillbox' || childName === 'lesson') {
      VTREE.content = childTree
    } else if (childName === 'footer') {
      VTREE.footer = childTree
    } else if (childName === 'header') {
      VTREE.header = childTree
    } else if (childName === 'promocode') { // OVERLAY
      VTREE.overlay = childTree
    }
    // RENDER
    var vtree = h('div', { className: x('app') }, [
      h('div', { className: x('overlay') }, VTREE.overlay),
      h('div', {
        className: x('esova', STATUS.inactive ? 'esova--inactive' : undefined)
      }, [
        h('div', { className: x('header') }, VTREE.header),
        h('div', { className: x('content') }, VTREE.content),
        h('div', { className: x('footer') }, VTREE.footer)
      ])
    ])
    // PUSH UPDATE
    engine.push({
      type: 'vtree',
      key: 'root',
      value: vtree
    })
  }


  /*****************************/
  // INCOMING COMMUNICATION CHANNELS
  db.on('put', function (key, value) { // SET by auth.js
    if (key === 'esova-credentials') {
      var creds = JSON.parse(value)
      if (creds && typeof creds.status === 'string' && creds.status!=='ok') {
        console.log('AUTH FAIL :-/')
        if (creds.status === 'no valid promocode') { // former: 'ui/promocode'
          // @TODO:
          // a certain STATUS can affect multiple components
          // => 1. an overlay showing/revealing itself
          // => 2. existing component changing appearance (e.g. blurring)
          STATUS.inactive = true
          debugger
          renderMainPage()
          db.put('OVERLAY', { status: 'show' }) // triggers re-render

        } else if (creds.status === 'no valid token') {
          renderMainPage()
        } else if (creds.status === 'could not store credentials') {
          renderMainPage()
        } else if (creds.status === 'couldnt get "auth code" from github') {
          renderMainPage()
        }
      } else {
        console.log('AUTH SUCCESSFUL :-)')
        STATUS.inactive = false
        renderMainPage() // @TODO: is a re-render here necessary?
      }
    }
  })


  /*****************************/
  // INITIALIZE
  console.log('--------------------------------')
  console.log('INITIALIZE: mainpage() component')
  console.log('--------------------------------')
  return renderMainPage


  /*****************************/
  // HELPER
  // ...


}
