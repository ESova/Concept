'use strict'
const { h, hsvg } = require('_h')
const s           = require('_s')



/******************************************************************************
  CUSTOM
******************************************************************************/
const header      = require('_vcs-header')
const skillbox    = require('_vcs-skilltree/skillbox')
const promocode   = require('_vcs-promocode')
const notFound    = require('_vcs-404')

var REGISTERED    = false
var FREE_LESSONS  = 4
/******************************************************************************
  MAIN - esova
******************************************************************************/
module.exports = RootComponent

function RootComponent (db, engine) {

  if (!REGISTERED) { // @HACK
    REGISTERED = true
    console.error('=== Global db listener activated! === ')
    db.on('put', function (key, value) {
      var val
      try { val = JSON.parse(value) } catch (e) { val = value }
      console.log('==============================')
      console.log('DB ACTIVITY: ', key, val)
      console.log('==============================')
      if (key === 'target') {
        console.error('!!!! target !!!!!')
        render()
      } else if (key === 'ERROR') {
        console.log('=====ORIGIN=====')
        console.log(value)
        console.log('=====ORIGIN=====')
      } else if (key === 'AUTH') {
        if (value && typeof value.message === 'string') {
          console.log('AUTH FAIL :-/')
          if (value.message === 'no valid promocode') {
            db.get('esova-currentLesson', function (error, value) {
              debugger
              if (error) value = 0
              else value <= FREE_LESSONS ?
              // LESEZEICHEN
              // @IDEA: set something and trigger render()
              // => maincomponent will re-render
              //   => will either show a popup or not - with certain content

              notify() : welcome()
              /*
              SIGNUP COMPONENT
              => when to trigger or self-trigger?
              => requirements met vs requirements not met yet
              */

              // OPTIONS:
              // 1. skillbox is rendered through mainpage () regularly
              // 2. skillbox is rendered but AUTH FAIL + currentLesson <= FREE_LESSONS
              //  @NOTE: when at lesson 4 end for signin => set currentLesson to 5
              //  => notifiy to finish first 4 lessons first
              // 3. skillbox is rendered but AUTH FAIL + currentLesson 5+
              //  => ask promo

            })
          } else if (value.message === 'no valid token') {
            renderError(value)
          } else if (value.message === 'could not store credentials') {
            renderError(value)
          } else if (value.message === 'couldnt get "auth code" from github') {
            renderError(value)
          }
        } else {
          consle.log('AUTH SUCCESSFUL :-)')
          render()
        }
      }
    })
  }

  // @NOTE render() is triggered by router and pushes changes to engine$
  //       - can be triggered by others too
  return render


  function render (error) {
    if (error) renderError(error)
    // mainpage pushes to main engine to replace the whole site with error page
    else mainpage(db, engine)
  }
  function renderError (error) {
    var e = { name: error.name, message: error.message, stack: error.stack }
    // @TODO: probably replace with ERROR
    // notFound pushes to main engine to replace the whole site with error page
    db.put('ERROR', JSON.stringify(e, null, 2), notFound(db, engine))
  }
}

/******************************************************************************
  MAIN - MAIN
******************************************************************************/
function mainpage (db, engine) {

  db.get('ui/promocode', function (error, value) {

    var theme = value !== 'invalid' ? undefined
      : '  filter: blur(2px);\n'+
        '  -webkit-filter: blur(2px);\n'+
        '  background-color: red;'

    var x = s(`
      app {
        min-height: 100vh;
        background-color: red;
      }
      esova {
        position: relative;
        display: flex;
        flex-direction: column;
        min-height: 100vh;
        width: 100%;
        background-color: ${'#526E96'};
        ${theme ? theme : ''}
      }
      header {
        min-height: 165px;
      }
      content {
        display: flex;
        flex-direction: row;
        justify-content: center;
        align-items: stretch;
        flex-grow: 1;
      }
      footer {
        min-height: 165px;
      }
    `)

    var VTREE = {
      header: '',
      content: '',
      footer: '',
      overlay: ''
    }

    promocode(db, { push: gogo }) // show popup

    header(db, { push: gogo })
    skillbox(db, { push: gogo })
    footer(db, { push: gogo })

    function gogo (update) {
      if (update.type !== 'vtree') console.log(new Error('wtf arrived?!?'))
      var childTree = update.value
      var childName = update.key
      if (childName === 'skillbox' || childName === 'lesson') {
        VTREE.content = childTree
      } else if (childName === 'footer') {
        VTREE.footer = childTree
      } else if (childName === 'header') {
        VTREE.header = childTree
      } else if (childName === 'promocode') { // OVERLAY
        debugger
        // VTREE.overlay = childTree
      } else {
        console.error(new Error('wtf did just render?!?'))
      }

      var vtree = h('div', { className: x('app') }, [
        h('div', { className: x('overlay') }, VTREE.overlay),
        h('div', { className: x('esova') }, [
          h('div', { className: x('header') }, VTREE.header),
          h('div', { className: x('content') }, VTREE.content),
          h('div', { className: x('footer') }, VTREE.footer)
        ])
      ])

      engine.push({
        type: 'vtree',
        key: 'root',
        value: vtree
      })

    }
  })
}
/******************************************************************************
  MAIN - footer
******************************************************************************/
function footer (db, engine) {
  engine.push({
    type: 'vtree',
    key: 'footer',
    value: ''
  })
}
