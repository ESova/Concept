'use strict'
/******************************************************************************
  STACK
******************************************************************************/
const diff    = require('virtual-dom/diff')
const patch   = require('virtual-dom/patch')
const create  = require('virtual-dom/create-element')
const stream  = require('readable-stream')
// const vselect = require('vtree-select')
/******************************************************************************
  CUSTOM
******************************************************************************/
const type   = require('component-type')
var isDOM    = function (x) { return type(x) === 'element' }

/******************************************************************************
  MAIN

  API: css selector OR dom node
******************************************************************************/
module.exports = function vcs2dom (target) {
  target = validateTarget(target) // might throw
  var element, patches, oldTree
  function write (vtree, encoding, next) {
    try {
      validateChunk(vtree) // might throw
      if (oldTree) {
        patches = diff(oldTree, vtree)
        element = patch(element, patches)
      } else {
        element = create(vtree, {})
        target.appendChild(element)
      }
      oldTree = vtree
      next()
    } catch (error) { next(error) }
  }
  return new stream.Writable({ write: write, objectMode: true })
}
function validateTarget (target) {
  if (typeof target ==='string') { target = document.querySelector(target) }
  if (!isDOM(target)) {
    var msg = target + ' is not a valid `DOM node selector`'
    throw new Error(msg)
  }
  return target
}
function validateChunk (vtree) { // @TODO: validate vtree
  if (typeof vtree === 'object') { return true }
  else {
    throw new Error('invalid vtree was piped to the engine: ' + vtree)
  }
}
