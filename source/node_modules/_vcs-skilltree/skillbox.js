'use strict'
/******************************************************************************
  STACK BASE
******************************************************************************/
var { h, hsvg } = require('_h')
var s           = require('_s')
/******************************************************************************
  STACK EXTEND
******************************************************************************/
var path        = require('path')
var urify       = require('urify')
var after       = require('after')
/******************************************************************************
  CUSTOM
******************************************************************************/
var githubapi = require('_githubapi')
// var gitterchat        = require('_vcs/gitterchat')
/******************************************************************************
  ASSETS
******************************************************************************/
var forward           = urify(path.join(__dirname, 'forward.png'))
var forward_pressed   = urify(path.join(__dirname, 'forward-pressed.png'))
var forward_arrow     = urify(path.join(__dirname, 'forward-arrow.png'))
var forward_pressed   = urify(path.join(__dirname, 'forward-pressed.png'))
var back              = urify(path.join(__dirname, 'back.png'))
var back_pressed      = urify(path.join(__dirname, 'back-pressed.png'))
var back_arrow        = urify(path.join(__dirname, 'back-arrow.png'))
var back_pressed      = urify(path.join(__dirname, 'back-pressed.png'))
var playicon          = urify(path.join(__dirname, 'play-icon.png'))
/******************************************************************************
  MAIN
******************************************************************************/
module.exports = skillbox

function skillbox (db, engine) {


  /*****************************/
  // THEME + LOCAL CACHE + DEFAULT VALUES
  var VTREE = {
    lessonHeaderContent: '',
    lessonContent: ''
  }
  var STATUS = {
    // LOCAL UI STATUS
    lessonstart: undefined, // lessonstart button hover state
    navleft: undefined,
    navright: undefined,
    // LOCAL DATA STATUS
    id: undefined,
    currentlesson: '0', // esova-lesson
    lastlesson: '0', // esova-currentLesson
    maxlesson: Infinity
  }
  // @TODO: switchboarded db should recognize all automatically
  var LOCALE = { // local CACHE - initial defaults are defined in template
    "text/lesson": "Lesson",
    "text/start": "Start Lesson",
    "text/chat:anon": "Complete the first 4 lessons and then sign up before you can chat"
  }
  var FREE_LESSONS = 4
  var lightbluegrey = '#D6DBE1'
  var esovadarkgreen = '#32A971'
  var esovagreen = '#35E38A'
  var esovadarkblue = 'hsl(216, 46%, 16%)'
  var esovablue = '#526E96'


  /*****************************/
  // INITIALIZE STYLING
  var x = s(`
    skillbox {
      display: flex;
      flex-direction: column;
      min-height: 450px;
      min-width: 600px;
      width: 75%;
      max-width: 1000px;
    }
    skillbox-nav {
      display: flex;
      justify-content: center;
      margin-bottom: 20px;
      padding-top: 30px;
      padding-bottom: 30px;
    }
    skillbox-description {
      display: flex;
      flex-grow: 1;
      background-color: ${'#fff'};
      border-top-right-radius: 20px;
      border-bottom-right-radius: 20px;
      border-top-left-radius: 20px;
      border-bottom-left-radius: 20px;
      min-width: 650px;
    }
    navright {
      box-sizing: border-box;
      display: flex;
      align-items: center;
      justify-content: center;
      width: 60px;
      height: 60px;
      background-position: center;
      background-image: url(${forward});
      background-size: 100%;
      background-repeat: no-repeat;
      cursor: pointer;
    }
    navleft-placeholder {
      box-sizing: border-box;
      display: flex;
      align-items: center;
      justify-content: center;
      width: 60px;
      height: 60px;
      margin-right: 100px;
    }
    navright-placeholder {
      box-sizing: border-box;
      display: flex;
      align-items: center;
      justify-content: center;
      width: 60px;
      height: 60px;
    }
    navright--hover {
    }
    navleft--hover {
    }
    navleft {
      box-sizing: border-box;
      display: flex;
      align-items: center;
      justify-content: center;
      width: 60px;
      height: 60px;
      margin-right: 100px;
      background-position: center;
      background-image: url(${back});
      background-size: 100%;
      background-repeat: no-repeat;
      cursor: pointer;
    }
    chat {
      display: flex;
      position: relative;
      overflow: hidden;
      flex-grow: 1;
      min-width: 300px;
      margin-top: 20px;
      margin-bottom: 20px;
    }
    chatframe {
      position: absolute;
      width: 125%;
      height: 125%;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%) scale(0.8);
    }
    chat-disabled {
      padding: 10px;
      font-family: arial;
      font-size: 15px;
      position: absolute;
      display: flex;
      flex-direction: column;
      width: 100%;
      justify-content: center;
      text-align: center;
      bottom: 0;
      height: 90px;
      background-color: white;
      z-index: 1;
    }
    lesson {
      font-family: ${'Avenir Roman'};
      box-sizing: border-box;
      display: flex;
      flex-direction: column;
      align-content: stretch;
      align-items: stretch;
      justify-content: center;
      background-color: ${lightbluegrey};
      min-width: 300px;
      flex-grow: 4;
      padding: 0px 10%;
      border-top-left-radius: 20px;
      border-bottom-left-radius: 20px;
    }
    lesson-header {
      align-items: flex-start;
      display: flex;
      flex-direction: row;
      flex-wrap: wrap;
    }
    lesson-id {
      display: flex;
      flex-direction: row;
      line-height: 0;
      color: ${esovagreen};
    }
    lesson-number {
      margin-left: 10px;
      color: ${esovablue};
    }
    lesson-title {
      margin-right: auto;
      display: flex;
      flex-direction: column;
      padding-bottom: 5px;
    }
    lessonstart {
      position: relative;
      top: 7px;
      border-radius: 15px;
      padding: 3px;
      margin-bottom: 20px;
      padding-left: 15px;
      padding-right: 15px;
      align-self: flex-start;
      white-space: nowrap;
      justify-content: flex-end;
      text-decoration: none;
      background-color: ${esovagreen};
      border: 1px solid ${esovadarkgreen};
      color: white;
    }
    lessonstart--blocked {
      background-color: ${'#ccc'};
      border: 1px solid ${'#999'};
    }
    lessonstart--hover {
      box-shadow: inset 0px 47px 52px -60px rgba(0,0,0,0.75);
    }
    lesson-seperator {
      border: 0.5pt solid white;
      width: 100%;
    }
  `)


  /*****************************/
  // CHILD COMPONENTS & USED MODULES
  var api = githubapi(db)
  // @TODO: tell them on what db.on('put') to listen...right?
  // => it seems to be currently hard coded
  lessonContent(db, { push: renderSkillbox })
  lessonHeaderContent(db, { push: renderSkillbox })


  /*****************************/
  // RENDER COMPONENT
  function renderSkillbox (/*error,*/ update) {
    // @TODO: ALWAYS VALIDATE STATUS before RENDERING

    var childTree = (update||{}).value
    var childName = (update||{}).key

    // MAYBE UPDATE CHILDREN
    if (childName === 'lessonContent') {
      VTREE.lessonContent = childTree
    }
    else if (childName === 'lessonHeaderContent') {
      VTREE.lessonHeaderContent = childTree
    }
    // RENDER
    var isAllowed = STATUS.id || +STATUS.currentlesson <= FREE_LESSONS
    var hasNoNavleft = +STATUS.currentlesson <= 0
    var hasNoNavright = +STATUS.currentlesson >= +STATUS.maxlesson

    var vtree = h('div', { className: x('skillbox') }, [
      h('div', { className: x('skillbox-nav') }, [
        hasNoNavleft ? h('span',{className:x('navleft-placeholder')}) : h('a', {
          className: x('navleft', STATUS.navleft),
          onmouseover: onmouseover.bind('navleft'),
          onmouseout: onmouseout.bind('navleft'),
          // href: '#lessonY', // @TODO: fix url
          onclick: function (event) {
            event.preventDefault()
            // USER ACTIONS are translated into specific "db.put's"
            // Listeners to those will then act upon user intent
            var nextNumber = (+STATUS.currentlesson-1)
            nextNumber = nextNumber <= 0 ? 0 : nextNumber
            db.put('esova-lesson',nextNumber+'',function(error){
              if(error)db.put('ERROR', 'skillbox navleft store curr.Less', ER)
            })
          }
        }, [
          h('img', { className: x('navarrow'), src: back_arrow })
        ]),
        hasNoNavright ? h('span',{className:x('navright-placeholder')}) : h('a', {
          className: x('navright', STATUS.navright),
          onmouseover: onmouseover.bind('navright'),
          onmouseout: onmouseout.bind('navright'),
          // href: '#lessonX', // @TODO: fix url
          onclick: function (event) {
            event.preventDefault()
            // USER ACTIONS are translated into specific "db.put's"
            // Listeners to those will then act upon user intent
            db.put('esova-lesson',(+STATUS.currentlesson+1)+'',function(error){
              if (error)db.put('ERROR','skillbox navright store cur.Less', ER)
            })
          }
        }, [
          h('img', { className: x('navarrow'), src: forward_arrow })
        ]),
      ]),
      h('div', { className: x('skillbox-description') }, [
        h('div', { className: x('lesson') }, [
          h('div', { className: x('lesson-header') }, [
            h('div', { className: x('lesson-title') }, [
              h('div', { className: x('lesson-id') }, [
                h('h1', LOCALE["text/lesson"]),
                h('h1', {className: x('lesson-number')}, STATUS.currentlesson)
              ]),
              VTREE.lessonHeaderContent
            ]),
            h('a', {
              className: x('lessonstart', isAllowed?'':'lessonstart--blocked', STATUS.lessonstart),
              onmouseover: onmouseover.bind('lessonstart'),
              onmouseout: onmouseout.bind('lessonstart'),
              onclick: isAllowed ? function startlesson (event) {
                event.preventDefault()
                alert('allowed')
                // => start lesson
                debugger
              } : function notify (event) {
                event.preventDefault()
                alert('forbidden')
                // => show notification
                debugger
              },
              href: '/#lesson'}, [
              h('img', { src: playicon, style: { marginRight: '10px' } }),
              LOCALE["text/start"]
            ])
          ]),
          h('hr', { className: x('lesson-seperator')}),
          VTREE.lessonContent
        ]),
        h('div', { className: x('chat') }, (function (thechat) {
          if (!(STATUS.id)) thechat.push(h('div', {
            className: x('chat-disabled')
          },LOCALE["text/chat:anon"]))
          thechat.push(h('iframe', { className: x('chatframe'), frameBorder: '0', src: 'https://gitter.im/ESova/eSovaITinfluencers/~embed' }))
          return thechat
        })([]))
      ])
    ])
    // PUSH UPDATE
    engine.push({
      type: 'vtree',
      key: 'skillbox',
      value: vtree
    })
  }


  /*****************************/
  // INCOMING COMMUNICATION CHANNELS
  db.on('put', function (key, value) {
    if (key ==='esova-credentials') {
      var ID = (value||{}).id
      if (STATUS.id !== ID) {
        // might change the "lessonstartbutton"
        STATUS.id = ID
        engine.push({ // ACT ON CHANGE
          type: 'vtree',
          key: 'skillbox',
          value: renderSkillbox() // UPDATE CACHE
        })
      }
    }
    else if (key === 'esova-lesson') {
      var lesson = value
      if (STATUS.currentlesson !== lesson) {
        // might change the dislayed lesson number
        STATUS.currentlesson = lesson
        updateLessonContent()
      }
    } else if (key === 'esova-maxlessons') {
      var max = value
      if (STATUS.maxlesson !== max) {
        STATUS.maxlesson = max
        if (STATUS.currentlesson > max) db.put('esova-lesson', max, ER)
        engine.push({ // ACT ON CHANGE
          type: 'vtree',
          key: 'skillbox',
          value: renderSkillbox() // UPDATE CACHE
        })
      }
    }
  })

  /*****************************/
  // INITIALIZE
  console.log('--------------------------------')
  console.log('INITIALIZE: skillbox() component')
  console.log('--------------------------------')
  // @TODO: set by parent through subEngine // <= wat?!?
  db.get('esova-credentials', function (error, credentials) {
    var ID = (credentials||{}).id
    // @TODO: use '#lessonXXX' in URL instead of 'esova-lesson'
    db.get('esova-lesson', function (no_currentlesson, currentlesson) {
      db.get('esova-currentLesson', function (no_lastlesson, lastlesson) {
        if (no_currentlesson) {
          if (no_lastlesson) {
            currentlesson = lastlesson = '0'
            db.put('esova-lesson', currentlesson)
            db.put('esova-currentLesson', lastlesson)
          } else {
            currentlesson = '0'
            db.put('esova-lesson', currentlesson)
          }
        } else {
          if (no_lastlesson) {
            lastlesson = '0'
            db.put('esova-currentLesson', lastlesson)
          }
        }
        db.get('esova-maxlessons', function (error, val) {
          var max = val <= 0 ? Infinity : val
          updateLessonContent()
          // if nothing changed, no need to re-render
          if (
            STATUS.id !== ID ||
            STATUS.lastlesson !== lastlesson ||
            STATUS.currentlesson !== currentlesson ||
            STATUS.maxlesson !== max
          ) {
            STATUS.id = ID
            STATUS.currentlesson = currentlesson
            STATUS.lastlesson = lastlesson
            STATUS.maxlesson = max
            engine.push({
              type: 'vtree',
              key: 'skillbox',
              value: renderSkillbox()
            })
          }
        })
      })
    })
  })
  // @TODO: switchboarded db should recognize all automatically
  var FIELDS = Object.keys(LOCALE).length
  var normal = function () {
    engine.push({
      type: 'vtree',
      key: 'skillbox',
      value: renderSkillbox()
    })
  }
  var init = after(FIELDS, function (err) {
    if (err) db.put('ERROR', err)
    else {
      normal()
      init = normal
    }
  })
  db.on('put', function (key, value) {
    if (LOCALE[key]) {
      LOCALE[key] = value
      init()
    }
  })


  /*****************************/
  // HELPER
  function updateLessonContent () {
    api('getlesson', function (error, lesson) {
      if ((error||{}).status === 401)
        db.put('ERROR', 'api getlesson 401 access denied', ER)
      else if ((error||{}).status === 404) {
        debugger
        db.put('esova-maxlessons', STATUS.currentlesson-1, ER)
      }
      else db.put('esova-lessonContent', lesson, function (error) {
        if (error) db.put('ERROR', new Error('couldnt set lesson content'))
      })
    })
  }
  function ER (error) {
    // @TODO
    // default error logging failed
    // => try to learn about error via ajax or some other technique
    // => if it fails inform user instead and hope he reports it in chat
    console.error('couldnt store ERROR event')
    console.error(error)
  }
  function onmouseover (event) {
    var key = this
    // STATUS = {}
    STATUS[key] = key+'--hover' // @HACK
    // db.put(key, key+'--hover', function (error) {
    //   if (error) db.put('ERROR', 'hover state could not be persisted', ER)
    // })
    renderSkillbox()
  }
  function onmouseout (event) {
    var key = this
    // STATUS = {}
    STATUS[key] = undefined // @HACK
    // db.del(key, function (error) {
    //   if (error) db.put('ERROR', 'unhover state could not be persisted', ER)
    // })
    renderSkillbox()
  }
}

///////////////////////////////////////////////
///////////////////////////////////////////////
///////////////////////////////////////////////
// 'use strict'
/******************************************************************************
  STACK BASE
******************************************************************************/
// var { h, hsvg } = require('_h')
// var s           = require('_s')
/******************************************************************************
  MAIN
******************************************************************************/
// module.exports = lessonHeaderContent

function lessonHeaderContent (db, engine) {


  /*****************************/
  // THEME + LOCAL CACHE + DEFAULT VALUES
  var esovagreen = '#35E38A'
  var esovablue = '#526E96'
  var STATUS = {
    title: '...',
    duration: '...'
  }
  // @TODO: switchboarded db should recognize all automatically
  var LOCALE = { // local CACHE - initial defaults are defined in template
    "text/time": "min"
  }

  /*****************************/
  // INITIALIZE STYLING
  var x = s(`
    lesson-name {
      color: ${esovablue};
    }
    lesson-duration {
      font-size: 20px;
      color: ${esovagreen};
    }
  `)


  /*****************************/
  // CHILD COMPONENTS & USED MODULES
  // ...


  /*****************************/
  // RENDER COMPONENT
  function renderLessonHeader () {
    var vtree = h('div', [
      h('div', { className: x('lesson-name') }, STATUS.title),
      h('div', { className: x('lesson-duration') }, [
        STATUS.duration + ' ' + LOCALE["text/time"]
      ])
    ])
    engine.push({
      type: 'vtree',
      key: 'lessonHeaderContent',
      value: vtree
    })
  }


  /*****************************/
  // INCOMING COMMUNICATION CHANNELS
  db.on('put', function (key, value) {
    if (key === 'esova-lessonContent') {
      STATUS.title = value.title
      STATUS.duration = value.duration
      renderLessonHeader()
    }
  })


  /*****************************/
  // INITIALIZE
  console.log('--------------------------------')
  console.log('INITIALIZE: lessonHeaderContent() component')
  console.log('--------------------------------')
  // @TODO: switchboarded db should recognize all automatically
  var FIELDS = Object.keys(LOCALE).length
  var normal = function () {
    engine.push({
      type: 'vtree',
      key: 'lessonHeaderContent',
      value: renderLessonHeader()
    })
  }
  var init = after(FIELDS, function (err) {
    if (err) db.put('ERROR', err)
    else {
      normal()
      init = normal
    }
  })
  db.on('put', function (key, value) {
    if (LOCALE[key]) {
      LOCALE[key] = value
      init()
    }
  })
  return undefined


  /*****************************/
  // HELPER
  // ...


}
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// 'use strict'
/******************************************************************************
  STACK BASE
******************************************************************************/
// var { h, hsvg } = require('_h')
// var s           = require('_s')
/******************************************************************************
  CUSTOM
******************************************************************************/
var markdownStyles = document.createElement('style')
markdownStyles.innerHTML = `
  .markdown {
    padding: 5px;
  }
`
document.head.appendChild(markdownStyles)
/******************************************************************************
  MAIN
******************************************************************************/
// module.exports = lessonContent

function lessonContent (db, engine) {


  /*****************************/
  // THEME + LOCAL CACHE + DEFAULT VALUES
  var esovablue = '#526E96'
  var STATUS = {
    lesson: '... loading lesson ...'
  }


  /*****************************/
  // INITIALIZE STYLING
  var x = s(`
    lesson-content {
      color: ${esovablue};
      font-size: 1em;
    }
  `)


  /*****************************/
  // CHILD COMPONENTS & USED MODULES
  // ...


  /*****************************/
  // RENDER COMPONENT
  function renderLessonContent () {
    var vtree = h('div', {
      className: x('lesson-content') + '  markdown'
    }, STATUS.lesson)
    engine.push({
      type: 'vtree',
      key: 'lessonContent',
      value: vtree
    })
  }


  /*****************************/
  // INCOMING COMMUNICATION CHANNELS
  db.on('put', function (key, value) {
    if (key === 'esova-lessonContent') {
      STATUS.lesson = value.content
      renderLessonContent()
    }
  })


  /*****************************/
  // INITIALIZE
  console.log('--------------------------------')
  console.log('INITIALIZE: lessonContent() component')
  console.log('--------------------------------')
  renderLessonContent()
  return undefined


  /*****************************/
  // HELPER
  // ...
}
