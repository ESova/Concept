'use strict'
var { h, hsvg } = require('_h')
var s           = require('_s')

var virtualhtml = require('virtual-html')
var path        = require('path')
var urify       = require('urify')
/******************************************************************************
  CUSTOM
******************************************************************************/
var githubapi   = require('_githubapi')
// var gitterchat        = require('_vcs/gitterchat')

var markdownStyles = document.createElement('style')
markdownStyles.innerHTML = `
  .markdown {
    padding: 5px;
  }
`
document.head.appendChild(markdownStyles)

var FREE_LESSONS = 4
/******************************************************************************
  ASSETS
******************************************************************************/
var forward           = urify(path.join(__dirname, 'forward.png'))
var forward_pressed   = urify(path.join(__dirname, 'forward-pressed.png'))
var forward_arrow     = urify(path.join(__dirname, 'forward-arrow.png'))
var forward_pressed   = urify(path.join(__dirname, 'forward-pressed.png'))
var back              = urify(path.join(__dirname, 'back.png'))
var back_pressed      = urify(path.join(__dirname, 'back-pressed.png'))
var back_arrow        = urify(path.join(__dirname, 'back-arrow.png'))
var back_pressed      = urify(path.join(__dirname, 'back-pressed.png'))
var playicon          = urify(path.join(__dirname, 'play-icon.png'))

/******************************************************************************
  MAIN - skillbox
******************************************************************************/
module.exports = skillbox

function skillbox (db, engine) {

  var lightbluegrey = '#D6DBE1'
  var esovadarkgreen = '#32A971'
  var esovagreen = '#35E38A'
  var esovadarkblue = 'hsl(216, 46%, 16%)'
  var esovablue = '#526E96'


  var x = s(`
    skillbox {
      display: flex;
      flex-direction: column;
      min-height: 450px;
      min-width: 600px;
      width: 75%;
      max-width: 1000px;
    }
    skillbox-nav {
      display: flex;
      justify-content: center;
      margin-bottom: 20px;
      padding-top: 30px;
      padding-bottom: 30px;
    }
    skillbox-description {
      display: flex;
      flex-grow: 1;
      background-color: ${'#fff'};
      border-top-right-radius: 20px;
      border-bottom-right-radius: 20px;
      border-top-left-radius: 20px;
      border-bottom-left-radius: 20px;
      min-width: 650px;
    }
    navright {
      box-sizing: border-box;
      display: flex;
      align-items: center;
      justify-content: center;
      width: 60px;
      height: 60px;
      background-position: center;
      background-image: url(${forward});
      background-size: 100%;
      background-repeat: no-repeat;
    }
    navright--hover {
    }
    navleft--hover {
    }
    navleft {
      box-sizing: border-box;
      display: flex;
      align-items: center;
      justify-content: center;
      width: 60px;
      height: 60px;
      margin-right: 100px;
      background-position: center;
      background-image: url(${back});
      background-size: 100%;
      background-repeat: no-repeat;
    }
    chat {
      display: flex;
      position: relative;
      overflow: hidden;
      flex-grow: 1;
      min-width: 300px;
      margin-top: 20px;
      margin-bottom: 20px;
    }
    chatframe {
      position: absolute;
      width: 125%;
      height: 125%;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%) scale(0.8);
    }
    chat-disabled {
      padding: 10px;
      font-family: arial;
      font-size: 15px;
      position: absolute;
      display: flex;
      flex-direction: column;
      width: 100%;
      justify-content: center;
      text-align: center;
      bottom: 0;
      height: 90px;
      background-color: white;
      z-index: 1;
    }
    lesson {
      font-family: ${'Avenir Roman'};
      box-sizing: border-box;
      display: flex;
      flex-direction: column;
      align-content: stretch;
      align-items: stretch;
      justify-content: center;
      background-color: ${lightbluegrey};
      min-width: 300px;
      flex-grow: 4;
      padding: 0px 10%;
      border-top-left-radius: 20px;
      border-bottom-left-radius: 20px;
    }
    lesson-header {
      align-items: flex-start;
      display: flex;
      flex-direction: row;
      flex-wrap: wrap;
    }
    lesson-id {
      display: flex;
      flex-direction: row;
      line-height: 0;
      color: ${esovagreen};
    }
    lesson-number {
      margin-left: 10px;
      color: ${esovablue};
    }
    lesson-title {
      margin-right: auto;
      display: flex;
      flex-direction: column;
      padding-bottom: 5px;
    }
    lesson-name {
      color: ${esovablue};
    }
    lesson-duration {
      font-size: 20px;
      color: ${esovagreen};
    }
    lessonstart {
      position: relative;
      top: 7px;
      border-radius: 15px;
      padding: 3px;
      margin-bottom: 20px;
      padding-left: 15px;
      padding-right: 15px;
      align-self: flex-start;
      white-space: nowrap;
      justify-content: flex-end;
      text-decoration: none;
      background-color: ${esovagreen};
      border: 1px solid ${esovadarkgreen};
      color: white;
    }
    lessonstart--blocked {
      background-color: ${'#ccc'};
      border: 1px solid ${'#999'};
    }
    lessonstart--hover {
      box-shadow: inset 0px 47px 52px -60px rgba(0,0,0,0.75);
    }
    lesson-seperator {
      border: 0.5pt solid white;
      width: 100%;
    }
    lesson-content {
      color: ${esovablue};
      font-size: 1em;
    }
  `)

  var api = githubapi(db)
  var action = 'getlesson'

  var STATE = {
    lessonstart: undefined
  }
  function onmouseover (event) {
    var key = this
    STATE = {}
    STATE[key] = key+'--hover' // @HACK
    db.put(key, key+'--hover', function (error) {
      if (error) db.put('ERROR', 'hover state could not be persisted', ER)
    })
    rerender()
  }
  function onmouseout (event) {
    var key = this
    STATE = {}
    STATE[key] = undefined // @HACK
    db.del(key, function (error) {
      if (error) db.put('ERROR', 'unhover state could not be persisted', ER)
    })
    rerender()
  }

  rerender()

  function rerender () {
    // @TODO: needs optimization in case people just "hover" some buttons
    api(action, function (error, data) {
      if ((error||{}).status === 401) alert("log in again")
      // @TODO: put 'error' instead
      else if (error) db.put('ERROR', 'api '+action+' 401 access denied', ER)
      else {
        var title = data.title
        var duration = data.duration
        var content = '<div class="'+x('markdown')+'">'+
          data.__content__+'</div>'
        virtualhtml(content, function (error, lesson) {
          // @TODO: put 'error' instead
          if (error) db.put('ERROR', 'couldnt render lesson description MD',ER)
          else renderSkillboxVtree(title, duration, lesson)
        })
      }
    })
  }

  function ER (error) {
    console.error('couldnt store ERROR event')
    console.error(error)
  }

  function renderSkillboxVtree(title, duration, lesson) {
    // @TODO: set by parent through subEngine
    db.get('esova-credentials', function (error, credentials) {
      db.get('esova-currentLesson', function (error, number) {
        // @TODO: put 'error' instead
        if (error) db.put('ERROR', 'couldnt get lessonNr', ER)
        else engine.push({
          type: 'vtree',
          key: 'skillbox',
          value: getSkillboxVtree(credentials, title, duration, lesson, +number)
        })
      })
    })
    // function b64_to_utf8 ( str ) {
    //   str = str.replace(/(\r\n|\n|\r)/gm,"");
    //   return decodeURIComponent(escape(window.atob( str )));
    // }
  }


  function getSkillboxVtree (credentials, title, duration, lesson, number) {
    var isAllowed = credentials || number <= FREE_LESSONS
    var vtree = h('div', { className: x('skillbox') }, [
      h('div', { className: x('skillbox-nav') }, [
        number === 0 ? '' : h('a', {
          className: x('navleft', STATE.navleft),
          onmouseover: onmouseover.bind('navleft'),
          onmouseout: onmouseout.bind('navleft'),
          // href: '#lessonY', // @TODO: fix url
          onclick: function () {
            number--
            db.put('esova-currentLesson', number, function (error) {
              // @TODO: put 'error' instead
              if (error) db.put('ERROR', 'skillbox navleft store curr.Less', ER)
              else rerender()
            })
          }
        }, [
          h('img', { className: x('navarrow'), src: back_arrow })
        ]),
        h('a', {
          className: x('navright', STATE.navright),
          onmouseover: onmouseover.bind('navright'),
          onmouseout: onmouseout.bind('navright'),
          // href: '#lessonX', // @TODO: fix url
          onclick: function () {
            number++
            db.put('esova-currentLesson', number+'', function (error) {
              // @TODO: put 'error' instead
              if (error) db.put('ERROR', 'skillbox navright store cur.Less', ER)
              else rerender()
            })
          }
        }, [
          h('img', { className: x('navarrow'), src: forward_arrow })
        ]),
      ]),
      h('div', { className: x('skillbox-description') }, [
        h('div', { className: x('lesson') }, [
          h('div', { className: x('lesson-header') }, [
            h('div', { className: x('lesson-title') }, [
              h('div', { className: x('lesson-id') }, [
                h('h1', 'Lesson'),
                h('h1', { className: x('lesson-number') }, number)
              ]),
              h('div', { className: x('lesson-name') }, title),
              h('div', { className: x('lesson-duration') }, [
                duration + ' min'
              ])
            ]),
            h('a', {
              className: x('lessonstart', isAllowed?'':'lessonstart--blocked', STATE.lessonstart),
              onmouseover: onmouseover.bind('lessonstart'),
              onmouseout: onmouseout.bind('lessonstart'),
              onclick: isAllowed ? function () {
                alert('allowed')
              } : function () {
                alert('forbidden')
                // use isAllowed
                // => start lesson
                // vs.
                // => show notification
              },
              href: '/#lesson'}, [
              h('img', { src: playicon, style: `margin-right: 10px;` }),
              'Start Lesson'
            ])
          ]),
          h('hr', { className: x('lesson-seperator')}),
          h('div', { className: x('lesson-content') + '  markdown'}, lesson)
        ]),
        h('div', { className: x('chat') }, (function (thechat) {
          if (!credentials) thechat.push(h('div', {
            className: x('chat-disabled')
          },'Complete the first 4 lessons and then signup before you can chat'))
          thechat.push(h('iframe', { className: x('chatframe'), frameBorder: '0', src: 'https://gitter.im/ESova/eSovaITinfluencers/~embed' }))
          return thechat
        })([]))
      ])
    ])
    return vtree
  }
}
