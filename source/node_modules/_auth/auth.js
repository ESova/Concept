'use strict'
/****************************************************************************
  STACK
****************************************************************************/
const WINDOW  = require("global/window")
const minixhr = require('minixhr')
const stream  = require('readable-stream')
/******************************************************************************
  CUSTOM
******************************************************************************/
const NO_ERROR    = null
const NO_ENDPOINT = new Error('no endpoint given')
const NO_CLIENTID = new Error('no clientID given')
const NO_RIGHTS   = new Error('no right requests given')

var settings  = {  // DIGITAL OCEAN BACKEND
  endpoint        : 'http://45.55.222.16/github_auths/access_token',
  clientID        : '36645fe5dcc1d41309ab',
  rights          : ['gist']
}
/******************************************************************************
  HELPER - receive github token guard
******************************************************************************/
var EXIT = WINDOW.parent || WINDOW
if (EXIT.opener) {
  var code = EXIT.location.search.split('=')[1]
  if (EXIT.opener.sendCode) (EXIT.opener.sendCode(code), EXIT.close())
  else throw new Error('missing API implementation: "sendCode"')
}
/******************************************************************************
  MAIN
******************************************************************************/
module.exports = GithubAuth

function GithubAuth (db, cb) {
  if (EXIT.opener) return // CASE: retrieve github auth token from BACKEND
  db.get('esova-credentials', function (error, oldCreds) {
    error ? getCredentials(settings, function start (err, newCreds) {
      if (err) cb(err)
      else cb(null, newCreds)
    }) : cb(null, oldCreds)
  })
  function getCredentials (x, cb) {
    if (!x.endpoint) { return cb(NO_ENDPOINT) }
    if (!x.clientID) { return cb(NO_CLIENTID) }
    if (!x.rights)   { return cb(NO_RIGHTS)   }
    WINDOW.sendCode = function sendCode (code) {
      setTimeout(function () {
        if (code)
          db.get('esova-promocode', function (error, promocode) {
            var params = '?code='+code+(promocode?'&promocode='+promocode:'')
            minixhr(x.endpoint+params, function (data, _, __, header) {
              // data = {
              //   validPromo: false/true,
              //   token: null/<token>,
              //   id: null/<id>
              // }
              try {
                data = JSON.parse(data)
                if (data.validPromo) {
                  var credentials = {
                    id: data.id,
                    token: data.token && data.token.length ? data.token:null
                  }
                  var token = credentials.token
                  if (token && token.length < 100) {
                    var creds = JSON.stringify(credentials)
                    // @NOTE: different visual components can trigger auth.js
                    // => auth.js sets 'esova-credentials' or produces a
                    //    status message (e.g. no valid token/promocode/etc...)
                    // => some listeners want to respond to those
                    db.put('esova-credentials', creds, function (err) {
                      if (err)
                        cb(new Error('could not store credentials' + creds))
                      else cb(null, credentials)
                    })
                  }
                  else cb(new Error('no valid token'))
                } else db.put('ui/promocode', 'invalid', function (error) {
                  cb(error ? error : new Error('no valid promocode'))
                })
              }
              catch (e) { cb(e) }
            })
          })
        else cb(new Error('couldnt get "auth code" from github'))
      },0)
    }
    var host    = 'http://github.com/login/oauth/authorize?'
    var params  = 'client_id='+x.clientID+'&scope='+x.rights.join('%2C')
    WINDOW.open(host + params, '_blank')
  }
}
