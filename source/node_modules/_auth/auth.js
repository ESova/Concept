'use strict'
/****************************************************************************
  STACK
****************************************************************************/
const WINDOW  = require("global/window")
const minixhr = require('minixhr')
const stream  = require('readable-stream')
/******************************************************************************
  CUSTOM
******************************************************************************/
const NO_ERROR    = null
const NO_ENDPOINT = new Error('no endpoint given')
const NO_CLIENTID = new Error('no clientID given')
const NO_RIGHTS   = new Error('no right requests given')

var settings  = {  // DIGITAL OCEAN BACKEND
  endpoint        : 'http://45.55.222.16/github_auths/access_token',
  clientID        : '36645fe5dcc1d41309ab',
  rights          : ['gist']
}
var HELP = '@TODO: describe module api usage'
var AUTH = {
  status  : undefined,
  id      : undefined,
  token   : undefined
}
/******************************************************************************
  HELPER - receive github token guard

  // @TODO: e.g. TELEGRAM SHARE PROBLEM
  // what if people open the page by clicking on a link in an existing page

  Uncaught SecurityError: Blocked a frame with origin "http://esova.github.io" from accessing a frame with origin "https://web.telegram.org".  The frame requesting access has a protocol of "http", the frame being accessed has a protocol of "https". Protocols must match.

  Uncaught SecurityError: Blocked a frame with origin "http://esova.github.io" from accessing a frame with origin "swappedout://".  The frame requesting access has a protocol of "http", the frame being accessed has a protocol of "swappedout". Protocols must match.

******************************************************************************/
var EXIT = WINDOW.parent || WINDOW
if (EXIT.opener && EXIT.opener.sendCode) {
  var code = EXIT.location.search.split('=')[1]
  EXIT.opener.sendCode(code)
  EXIT.close()
}
/******************************************************************************
  MAIN
******************************************************************************/
module.exports = GithubAuth

    // var HELP = '@TODO: describe module api usage'
    // var AUTH = {
    //   status  : undefined,
    //   id      : undefined,
    //   token   : undefined
    // }
function GithubAuth (db, cb) {
  if (EXIT.opener) return // CASE: retrieve github auth token from BACKEND
  db.get('esova-credentials', function (error, oldCreds) {
    if (oldCreds && (!oldCreds.id || !oldCreds.token)) error = oldCreds
    if (error) {
      getCredentials(settings, function start (err, newCreds) {
        (AUTH = (newCreds||{})).status = err ? err.message : 'clear'
        // @TODO: add auto de/en coding, so the manual stringify/parse goes away
        db.put('esova-credentials', JSON.stringify(AUTH), function (e) {
          if (cb) e ? cb(e, HELP) : cb(null, HELP)
        })
      })
    } else {
      (AUTH = (oldCreds||{})).status = err ? err.message : 'clear'
      // @TODO: add auto de/en coding, so the manual stringify/parse goes away
      db.put('esova-credentials', JSON.stringify(AUTH), function (e) {
        if (cb) e ? cb(e, HELP) : cb(null, HELP)
      })
    }
  })
  function getCredentials (x, start) {
    if (!x.endpoint) { return start(NO_ENDPOINT) }
    if (!x.clientID) { return start(NO_CLIENTID) }
    if (!x.rights)   { return start(NO_RIGHTS)   }
    WINDOW.sendCode = function sendCode (code) {
      // @TODO: try to use window.postMessage, because that might work cross-origin by default, right
      setTimeout(function () {
        if (code)
          db.get('esova-promocode', function (error, promocode) {
            var params = '?code='+code+(promocode?'&promocode='+promocode:'')
            minixhr(x.endpoint+params, function (data, _, __, header) {
              // data = {
              //   validPromo: false/true,
              //   token: null/<token>,
              //   id: null/<id>
              // }
              try {
                data = JSON.parse(data)
                if (data.validPromo) {
                  var credentials = {
                    id: data.id,
                    token: data.token && data.token.length ? data.token:null
                  }
                  var token = credentials.token
                  if (token && token.length < 100) {
                    var creds = JSON.stringify(credentials)
                    // @NOTE: different visual components can trigger auth.js
                    // => auth.js sets 'esova-credentials' or produces a
                    //    status message (e.g. no valid token/promocode/etc...)
                    // => some listeners want to respond to those
                    start(null, credentials)
                  }
                  else start(new Error('no valid token'))
                } else start(new Error('no valid promocode'))
              }
              catch (e) { start(e) }
            })
          })
        else start(new Error('couldnt get "auth code" from github'))
      },0)
    }
    var host    = 'http://github.com/login/oauth/authorize?'
    var params  = 'client_id='+x.clientID+'&scope='+x.rights.join('%2C')
    WINDOW.open(host + params, '_blank')
  }
}
