'use strict'
/****************************************************************************
  STACK
****************************************************************************/
const WINDOW  = require("global/window")
const minixhr = require('minixhr')
const stream  = require('readable-stream')
/******************************************************************************
  CUSTOM
******************************************************************************/
const NO_ERROR    = null
const NO_ENDPOINT = new Error('no endpoint given')
const NO_CLIENTID = new Error('no clientID given')
const NO_RIGHTS   = new Error('no right requests given')
/******************************************************************************
  HELPER - receive github token guard
******************************************************************************/
var EXIT = WINDOW.parent || WINDOW
if (EXIT.opener) {
  var code = EXIT.location.search.split('=')[1]
  if (EXIT.opener.sendCode) (EXIT.opener.sendCode(code), EXIT.close())
  else throw new Error('missing API implementation: "sendCode"')
}

/******************************************************************************
  MAIN
******************************************************************************/
module.exports = GithubAuth

function GithubAuth (db, cb) {
  if (EXIT.opener) return // CASE: retrieve github auth token
  var settings  = {  // DIGITAL OCEAN BACKEND
    endpoint        : 'http://45.55.222.16/github_auths/access_token',
    clientID        : '36645fe5dcc1d41309ab',
    rights          : ['gist']
  }
  db.get('esova-token', function (error, token) {
    // @TODO: debug SIGN IN
    // debugger
    error ? auth(settings, function start (err, token) {
      if (err) cb(err)
      else if (!token) cb()
      else db.put('esova-token', token, function (e) {
        if (e) cb(new Error('could not store token'))
        else cb(null, token)
      })
    }) : cb() // @TODO: maybe github token expires?
  })
  function auth (x, cb) {
    if (!x.endpoint) { return cb(NO_ENDPOINT) }
    if (!x.clientID) { return cb(NO_CLIENTID) }
    if (!x.rights)   { return cb(NO_RIGHTS)   }
    WINDOW.sendCode = function sendCode (code) {
      setTimeout(function () {
        if (code)
          db.get('esova-promocode', function (error, promocode) {
            var params = '?code='+code+ (promocode ? '&promocode='+promocode : '')
            minixhr(x.endpoint+params, function (error, data, _, __, header) {
              // data = { validPromo: false/true, token: null/<token> }
              try {
                // @TODO: debug SIGN IN
                // debugger
                data = JSON.parse(data)
                if (data.validPromo) {
                  var token = data.token && data.token.length ? data.token : null
                  if (token && token.length < 100)
                  db.put('esova-token', token, function (err) {cb(err,token)})
                  else cb(new Error('no valid token'))
                } else db.put('ui/promocode', 'invalid', cb)
              }
              catch (e) { cb(e) }
            })
          })
        else cb(new Error('couldnt get "auth code" from github'))
      },0)
    }
    var host    = 'http://github.com/login/oauth/authorize?'
    var params  = 'client_id='+x.clientID+'&scope='+x.rights.join('%2C')
    WINDOW.open(host + params, '_blank')
  }
}
