'use strict'
/******************************************************************************
  STACK BASE
******************************************************************************/
var { h, hsvg } = require('_h')
var s           = require('_s')
/******************************************************************************
  STACK EXTEND
******************************************************************************/
var path        = require('path')
var urify       = require('urify')
var minixhr     = require('minixhr')
var defined     = require('defined')
var after       = require('after')
/******************************************************************************
  CUSTOM
******************************************************************************/
var auth = require('_auth')
/******************************************************************************
  ASSETS
******************************************************************************/
var start = urify(path.join(__dirname, 'start.png'))
var header = urify(path.join(__dirname, 'header.png'))
var closebutton = urify(path.join(__dirname, 'closebutton.png'))
/******************************************************************************
  MAIN
******************************************************************************/
module.exports = PromocodeComponent

function PromocodeComponent (db, engine) { // SIGNUP COMPONENT - OVERLAY


  /*****************************/
  // THEME + LOCAL CACHE + DEFAULT VALUES
  var esovablue = '#526E96'
  var esovalightblue = '#edf2fa'
  var esovalightgreen = '#35E38A'
  var esovared = 'FA9B68'
  var esovafont1 = 'Avenir Roman'
  var FREE_LESSONS  = 4
  var STATUS = {
    message: 'clear',
    promocode: ''
  }


  /*****************************/
  // INITIALIZE STYLING
  var x = s(`
    promocode {
      display: flex;
      flex-direction: column;
      height: 100%;
      width: 100%;
      justify-content: flex-start;
      align-items: center;
      z-index: 10;
      background-color: hsla(0, 0%, 0%, 0.19);
    }
    welcome {
      margin-top: 245px;
      display: flex;
      box-sizing: content-box;
      flex-direction: column;
      justify-content: flex-start;
      align-items: center;
      min-width: 200px;
      width: 80%;
      max-width: 475px;
      min-height: 280px;
      height: 27%;
      padding: 0 10px 80px 10px;
      background-color: hsla(0, 0%, 100%, 1);
      color: black;
      font-family: ${esovafont1};
      border-radius: 15px;
      font-size: 3vmin;
    }
    message {
      color: ${esovalightgreen};
      font-size: 18px;
      line-height: 30px;
      text-align: center;
      font-weight: normal;
      font-family: Avenir Roman;
    }
    codeinput {
      padding-top: 55px;
    }
    errormessage {
      color: ${esovared};
      font-size: 18px;
      line-height: 30px;
      text-align: center;
      font-weight: normal;
      font-family: Avenir Roman;
    }
    promoinput {
      background-color: ${esovalightblue};
      font-size: 18px;
      padding: 10px;
      border: 1px solid ${esovablue};
      border-top-left-radius: 15px;
      border-bottom-left-radius: 15px;
      color: ${esovablue};
      border-right: 0;
      font-family: ${esovafont1};
      text-align: center;
    }
    signup {
      background-color: ${esovablue};
      border: 1px solid ${esovablue};
      border-top-right-radius: 15px;
      border-bottom-right-radius: 15px;
      padding: 10px;
      font-family: ${esovafont1};
      color: white;
      font-size: 18px;
      cursor: pointer;
    }
    notready {
      display: flex;
      align-items: center;
      justify-content: center;
    }
    startnow {
      background-color: ${esovablue};
      border: 1px solid ${esovablue};
      border-radius: 15px;
      padding: 10px;
      font-family: ${esovafont1};
      color: white;
      font-size: 18px;
      cursor: pointer;
    }
    closebutton {
      align-self: flex-end;
      padding-top: 10px;
      cursor: pointer;
    }
  `)


  /*****************************/
  // CHILD COMPONENTS & USED MODULES
  // ...
  function returnNotReady () {
    return h('div', [
      h('h2', { className: x('message') }, LOCALE['text/overlay/promocode:notready']
      ),
      h('div',  { className: x('notready') }, [
        h('button', {
          className: x('startnow'),
          onclick: onsignin
        },
          LOCALE['text/overlay/promocode/button:startnow']
        )
      ])
    ])
  }

  function returnWrongPromocode () {
    return h('div', [
      // @TODO @NOTE: add to translation file
      h('h2', { className: x('errormessage') },
        LOCALE['text/overlay/promocode:wrong']
      )
    ])
  }


  /*****************************/
  // RENDER COMPONENT
  function renderPromocode () {
    var vtree = STATUS.message === 'clear' ?
      '' // renders nothing to clear the overlay
    : h('div', {
      className: x('promocode'),
      onclick: function (event) {
        if (this === event.target) onclose(event)
      }
    }, [
      h('div', { className: x('welcome') }, [
        h('img', {
          src: closebutton,
          className: x('closebutton'),
          onclick: onclose
        }),
        h('img', { src: header, className: x('header-picture')}),
        STATUS.message === 'not ready' ?
        returnNotReady()
        : h('div', { className: x('codeinput') }, [
          h('input', {
            className: x('promoinput'),
            name: 'promocode',
            onchange: function (event) {
              STATUS.promocode = event.target.value
            },
            onkeyup: function (event) {
              var key = event.which
              if (key === 13) { // enter
                db.put('esova-promocode', STATUS.promocode, function (error) {
                  // auth === ACTION_signIn(...)
                  // param is/was set via db.put ...
                  auth(db, function (error, help) { })
                })
              }
            },
            placeholder: LOCALE['text/overlay/promocode/placeholder']
          }),
          h('button', {
            className: x('signup'),
            onclick: function () {
              // @IDEA
              // The "SIGNAL" is like a "BEHAVIOR" instead of "EVENT"
              // => when it changes, listeners are informed
              // => the signal (=value of the "event") stays the same until
              //    its changed to something else
              db.put('esova-promocode', STATUS.promocode, function (error) {
                // auth === ACTION_signIn(...)
                // param is/was set via db.put ...
                auth(db, function (error, help) { })
              })
            },
          }, LOCALE['text/overlay/promocode/button:signup'])
        ]),
        STATUS.message === 'no valid promocode' ?
        returnWrongPromocode()
        : ''
      ])
    ])
    // PUSH UPDATE
    engine.push({
      type: 'vtree',
      key: 'promocode',
      value: vtree
    })
  }


  /*****************************/
  // INCOMING COMMUNICATION CHANNELS
  db.on('put', function (key, value) {
    try { value = JSON.parse(value) }
    catch (e) { value = defined(value, {}) }


    if (key === 'OVERLAY') {
      var status = value.status

      if (status === 'ok') {
        status = 'clear' // login successful => clear overlay
      }
      if (status === 'no valid promocode' && STATUS.message === 'clear') {
        status = 'ok' // login failed first time => dont say wrong promo yet
      }


      db.get('esova-currentLesson', function (error, lastlesson) {
        // if (value.status === 'no valid promocode') {
        //   var deny = lastlesson ? lastlesson <= FREE_LESSONS : false
        //
        // }
        debugger
        if (status === 'clear') {
          STATUS.message = status
          renderPromocode()
        }
        else if (status === 'ok') {
          STATUS.message = status
          renderPromocode()
        }
        else if (status === 'no valid promocode') {
          STATUS.message = status
          renderPromocode()
        }
        else if (status === 'not ready') {
          // AUTH FAIL + currentLesson <= FREE_LESSONS
          STATUS.message = status
          renderPromocode()
        }
        else if (status === 'unmet requirements')  {
          STATUS.message = status
          renderPromocode()
        }
        else {
          console.error('STATUS '+value+' is unknown')
          db.put('ERROR', 'OVERLAY: '+status, ER)
        }
      })
    }
    /********************************/
  })


  /*****************************/
  // INITIALIZE
  console.log('--------------------------------')
  console.log('INITIALIZE: promocode() component')
  console.log('--------------------------------')
  var LOCALE = {
    "text/overlay/promocode/button:startnow": "--startnow---",
    "text/overlay/promocode/button:signup": "--signup---",
    "text/overlay/promocode/placeholder": "---placeholder---",
    "text/overlay/promocode:notready": "---notready---",
    "text/overlay/promocode:wrong": "---wrong---"
  }
  var FIELDS = Object.keys(LOCALE).length
  var init = after(FIELDS, function (err) {
    if (err) db.put('ERROR', err)
    else {
      renderPromocode()
      init = renderPromocode
    }
  })
  db.on('put', function (key, value) {
    if (LOCALE[key]) {
      LOCALE[key] = value
      init()
    }
  })
  // components at least do not return vtree ...but maybe some kind of API
  // ... to set "default wireup" in context of users instantiating "usage code"
  return undefined // components don't return anything! @TODO: remove this line


  /*****************************/
  // HELPER
  function ER (error) {
    // @TODO
    // default error logging failed
    // => try to learn about error via ajax or some other technique
    // => if it fails inform user instead and hope he reports it in chat
    if (error) {
      console.error('couldnt store ERROR event')
      console.error(error)
    }
  }
  // ACTIONS
  function onsignin (event) {
    event.preventDefault()
    auth(db, function noop (error, help) { })
  }
  function onclose (event) {
    // basically are:
    // - functions if they manipulate only the component itself
    // - db.put signals if they want to inform the world too
    // - db put signals if they manipulate themselves
    //   (they just need to listen to themselves),
    //   but want to inform the world too
    event.preventDefault()
    db.put('OVERLAY', JSON.stringify({ status: 'clear' }))
  }

}
