'use strict'
/******************************************************************************
  STACK BASE
******************************************************************************/
var { h, hsvg } = require('_h')
var s           = require('_s')
/******************************************************************************
  STACK EXTEND
******************************************************************************/
var path        = require('path')
var urify       = require('urify')
var minixhr     = require('minixhr')
/******************************************************************************
  CUSTOM
******************************************************************************/
var auth = require('_auth')

var FREE_LESSONS  = 4
/******************************************************************************
  ASSETS
******************************************************************************/
var start = urify(path.join(__dirname, 'start.png'))
/******************************************************************************
  MAIN
******************************************************************************/
module.exports = PromocodeComponent

function PromocodeComponent (db, engine) { // SIGNUP COMPONENT - OVERLAY

  var x = s(`
    promocode {
      position: absolute;
      top: 0;
      display: flex;
      flex-direction: column;
      height: 100%;
      width: 100%;
      justify-content: flex-start;
      align-items: center;
      z-index: 10;
      background-color: hsla(0, 0%, 0%, 0.19);
    }
    welcome {
      margin-top: 165px;
      display: flex;
      box-sizing: content-box;
      flex-direction: column;
      justify-content: flex-start;
      align-items: center;
      min-width: 450px;
      width: 80%;
      max-width: 1200px;
      min-height: 450px;
      height: 60%;
      padding: 50px;
      background-color: hsla(0, 0%, 0%, 0.9);
      color: white;
      font-family: arial;
      font-size: 3vmin;
    }
    promoinput {
      background-color: white;
      font-size: 3vmin;
      border: 2px dotted white;
      background: none;
      color: white;
      border-right: 0;
      text-align: center;
    }
    signin {
      color: white;
      background-color: ${'#32A971'};
      border: 0;
      padding: 3px;
      font-family: arial;
      font-size: 3vmin;
    }
    signup {
      color: white;
      background-color: ${'#32A971'};
      border: 0;
      padding: 3px;
      font-family: arial;
      font-size: 3vmin;
    }
  `)
  /****************************************************************************
    INCOMING MESSAGE CHANNELS
  ****************************************************************************/
  db.on('put', function (key, value) {
    if (key === 'esova-credentials') {
      debugger
      if (value.status === 'no valid promocode')
        db.put('OVERLAY', true, function noop (error) { })
      else {

      }
      // ui/promocode => communication channel with rest of app

      // CURRENTY: ui/promocode
      //
      // PUT by HEADER through "auth" when clicking "Sign In"
      //    => then PUT "AUTH" to esova.js => PUT "STATUS" to promocode.js
      //
      // GET by ESOVA when rendering blurry or not
      //
      // PUT by PROMOCODE through "auth" when clicking "Sign Up"
      // GET by PROMOCODE to show status message to user (allow vs. deny)
      //
      db.get('esova-currentLesson', function (error, lastlesson) {
        var allow = lastlesson ? lastlesson < FREE_LESSONS : false

        debugger
        // RENDER

        // db.put('ui/promocode', 'invalid'
        // db.put('STATUS', 'allow invalid'

        // VS.

        // alert('got valid promocode, should now SIGNUP and maybe hide popup')

      })

    }
    /********************************/
    // db.get('esova-currentLesson', function (error, value) {
    //   if (error) value = 0
    //   // AUTH FAIL + currentLesson <= FREE_LESSONS
    //   // vs.
    //   // AUTH FAIL + currentLesson 5+
    //   else value <= FREE_LESSONS ?
    //   db.put('STATUS', 'deny') // requirements un-met
    //   : db.put('STATUS', 'allow') // requirements met
    // })

    if (key === 'STATUS') {
      if (value === 'deny') {
        debugger
        engine.push({
          type: 'vtree',
          key: 'promocode',
          value: render('deny')
        })
      } else if (value === 'allow') {
        debugger
        engine.push({
          type: 'vtree',
          key: 'promocode',
          value: render('allow')
        })
      } else if (value === 'allow invalid') {
        debugger
        engine.push({
          type: 'vtree',
          key: 'promocode',
          value: render('allow invalid')
        })
      } else if (value === 'clear') {
        debugger
        engine.push({
          type: 'vtree',
          key: 'promocode',
          value: ''
        })
      } else {
        debugger
        console.error('STATUS '+value+' is unknown')
      }
    }
    /********************************/
  })
  /*************************************
    INTERNAL STATE (Temporary Cache)
  *************************************/
  var STATE = {
    promocode: ''
  }
  // components at least do not return vtree ...but maybe some kind of API
  // ... to set "default wireup" in context of users instantiating "usage code"
  return undefined // components don't return anything! @TODO: remove this line

  function render (status) {
    // @TODO @NOTE: when at lesson 4 end for signin => set currentLesson to 5
    // => notifiy to finish first 4 lessons first
    // => ask promo
    alert(status)
    var vtree = h('div', { className: x('promocode') }, [
      h('div', { className: x('welcome') }, [
        h('h1', 'Welcome to ESova'),
        h('h2', 'Please enter your promo code'),
        h('div', [
          h('input', {
            className: x('promoinput'),
            name: 'promocode',
            onchange: function (event) {
              STATE.promocode = event.target.value
            },
            onkeyup: function (event) {
              var key = event.which
              if (key === 13) { // enter
                ACTION_signIn(event.target.value)
              }
            },
            placeholder: 'Enter promocode'
          }),
          h('button', {
            className: x('signup'),
            onclick: function () {
              // @IDEA
              // this "state setting" could already be done by action executor
              // => promocode might just listen to the RESULT
              // db.on('ui/promocode') and act on it
              //
              // ACTION_signIn(STATE.promocode)

              // @IDEA
              // The "SIGNAL" is like a "BEHAVIOR" instead of "EVENT"
              // => when it changes, listeners are informed
              // => the signal (=value of the "event") stays the same until
              //    its changed to something else
              db.put('esova-promocode', promocode, function (error) {
                // auth === ACTION_signIn(...)
                // param is/was set via db.put ...

                auth(db, callback)
              })

            },
          }, 'Sign Up')
        ])
      ])
    ])
    return vtree
  }
}
