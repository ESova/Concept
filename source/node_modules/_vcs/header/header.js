'use strict'
const { h, hsvg } = require('_h')
const s           = require('_s')

var path          = require('path')
var urify         = require('urify')

const auth      = require('_auth')

var owl = urify(path.join(__dirname, 'owl.png'))
var owlbase = urify(path.join(__dirname, 'owlbase.png'))
var blocks = urify(path.join(__dirname, 'blocks.png'))

var logout = urify(path.join(__dirname, 'logout.png'))
var chat = urify(path.join(__dirname, 'messages.png'))
var chatSelected = urify(path.join(__dirname, 'messages-selected.png'))
var skillbox = urify(path.join(__dirname, 'skillmap.png'))
var skillboxSelected = urify(path.join(__dirname, 'skillmap-selected.png'))
var settings = urify(path.join(__dirname, 'settings.png'))

module.exports    = header

function header (db, engine) {

  var x = s(`
    header {
      display: flex;
      margin-top: 40px;
      justify-content: center;
    }
    menubar {
      box-sizing: border-box;
      position: relative;
      display: flex;
      border-radius: 50px;
      height: 85px;
      justify-content: space-between;
      align-items: center;
      background-color: ${'#fff'};
      min-width: 900px;
      max-width: 1200px;
      width: 90%;
    }
    logo {
      box-sizing: border-box;
      position: relative;
      top: 2%;
      display: flex;
      justify-content: center;
      margin-left: 175px;
      align-items: center;
      width: 265px;
      min-width: 265px;
      height: 150px;
      padding-left: 55px;
      padding-right: 60px;
    }
    logo-owl {
      z-index: 3;
    }
    logo-owlbase {
      position: absolute;
      top: 1%;
      left: 21.5%;
      z-index: 1;
    }
    logo-blocks {
      position: absolute;
      top: 5%;
      left: 8%;
      height: 130px;
      width: 235px;
      z-index: 2;
    }

    usernav {
      display: flex;
      justify-content: space-between;
      align-items: center;
      height: 85px;
      margin-left: auto;
      flex-grow: 1;
      border-top-right-radius: 50px;
      border-bottom-right-radius: 50px;
      border-left: 2px solid ${'#32A971'};
      background-color: #35E38A;
    }
    esovanav {
      display: flex;
      justify-content: space-around;
      align-items: center;
      height: 85px;
      flex-grow: 1;
      margin-right: auto;
      border-top-left-radius: 50px;
      border-bottom-left-radius: 50px;
    }

    skillbox {
      padding: 15px;
    }
    skillbox-hover {
      background-image: url(${skillboxSelected});
      background-position: center;
      background-repeat: no-repeat;
    }
    skillbox-link { }

    chat {
      padding: 15px;
    }
    chat-hover {
      background-image: url(${chatSelected});
      background-position: center;
      background-repeat: no-repeat;
    }
    chat-link { }

    profile {
      display: flex;
      justify-content: space-around;
      padding: 8px;
      margin-left: 25px;
      background-color: hsla(0, 0%, 0%, 0.15);
      width: 80px;
      border-radius: 50px;
    }
    logout { }
    settings { }
    logout-link { }
    settings-link { }

    avatar {
      display: flex;
      flex-direction: row;
      align-items: center;
    }
    avatar-image {
      width: 65px;
      height: 65px;
      border-radius: 50px;
      box-shadow: -10px 10px 30px -20px;
      border: 5px white solid;
      margin-right: 7px;
      background-color: #eee;
    }
    avatar-name {
      color: #fff;
      margin-right: 20px;
      font-size: 20px;
      font-family: arial;
    }
  `)
  function onmouseover (event) {
    var key = this
    db.put(key, 'skillbox-hover', function () {
      engine()
    })
    STATE = {}
    STATE[key] = 'skillbox-hover' // @HACK
  }
  function onmouseout (event) {
    var key = this
    db.del(key, engine)
    STATE = {}
    STATE[key] = undefined // @HACK
  }
  var vtree = h('div', { className: x('header') }, [
    h('div', { className: x('menubar') }, [
      h('div',{ className: x('esovanav') }, [
        h('a', {
          onmouseover: onmouseover.bind('skillbox'),
          onmouseout: onmouseout.bind('skillbox'),
          className: x('skillbox', STATE.skillbox), href: '/' }, [
          h('img', { className: x('skillbox-link'), src: skillbox })
        ]),
        h('a', {
          onmouseover: onmouseover.bind('chat'),
          onmouseout: onmouseout.bind('chat'),
          className: x('chat', STATE.chat),
          href: 'https://gitter.im/ESova/program/', target: '_blank' }, [
          h('img', { className: x('chat-link'), src: chat })
        ])
      ]),
      h('div', { className: x('logo') }, [
        h('img', { className: x('logo-owl'), src: owl }),
        h('img', { className: x('logo-owlbase'), src: owlbase }),
        h('img', { className: x('logo-blocks'), src: blocks })
      ]),
      h('div', { className: x('usernav') }, [
        h('div', { className: x('profile') }, [
          h('a', { className: x('logout'), href: '#logout' }, [
            h('img', { className: x('logout-link'), src: logout })
          ]),
          h('a', { className: x('settings'), href: '#settings' }, [
            h('img', { className: x('settings-link'), src: settings })
          ]),
        ]),
        h('div', { className: x('avatar') }, [
          h('div', { className: x('avatar-name') }, 'John Doe'),
          h('img', {
            className: x('avatar-image'),
            src: owl,
            onclick: function (event) {
              // @TODO: enable SIGNUP on a specific slide
              // @TODO: before: signed out => "Welcome to Esova"
              // @TODO: then: Signup now :-)
              // @TODO: after: show avatar

              // @TODO: show again welcome page if promo is became invalid
              // @TODO: TEST what happens if account is deleted...
              auth(db, function (error) {

                debugger
                // engine()

              })
              // function ACTION_signIn () { // BACKEND COMMUNICATION
              //   function callback (error, promocode) {
              //     if (error) db.put('ui/promocode', 'invalid', render)
              //     else db.put('esova-promocode', promocode, function (error) {
              //       if (error) render(error)
              //       else db.del('ui/promocode', function (error) {
              //         render(error)
              //       })
              //     })
              //   }
              // }
              //////////////////////
              // var endpoint = 'http://45.55.222.16/github_auths/access_token'
              // db.get('welcome/promocode', function (error, promocode) {
              //   if (error) return callback(error)
              //   var params = '?promocode='+promocode
              //   minixhr(endpoint+params, function (error, data, _, __, header) {
              //     // data = { validPromo: false/true, token: null/<token> }
              //     try {
              //       data = JSON.parse(data)
              //       if (data.validPromo) callback(null, promocode)
              //       else callback(new Error('no valid promo code'))
              //     }
              //     catch (e) { callback(e) }
              //   })
              // })
            }
          })
        ])
      ])
    ])
  ])
  return vtree
}
var STATE = {
  skillboxState: undefined, // @HACK
  chatState: undefined // @HACK
}
