var h = require('virtual-dom/h')

module.exports = NotFoundComponent

function NotFoundComponent (db, engine) {
  var style1 = {
    display: 'flex',
    flexDirection: 'column',
    color: 'white',
    fontFamily: 'arial',
    width: '100%',
    minHeight: '100%',
    fontSize: '1.5vmin',
    alignItems: 'center',
    justifyContent: 'flex-start',
    backgroundColor: 'red'
  }
  var style2 = {
    fontSize: '1.5vmin',
    backgroundColor:'white',
    borderRadius:'50px',
    minWidth: '600px',
    padding: '20px',
    width: '50%',
    height: '50%'
  }
  var style3 = { fontSize: '1.5vmin', boxSizing: 'border-box' }
  var sh = { style: { color: 'white', padding: '20px' } }
  var styleError = {
    backgroundColor: 'white',
    color: 'red',
    padding: '15px'
  }
  var props = {
    style: style3,
    width:'100%',
    height:'100%',
    frameBorder:'0',
    src: 'https://gitter.im/ESova/esova.github.io/~embed'
  }

  return function render404 (err) {
    // @TODO: log the error to a backend
    db.get('error', function (error, value) {
      if (error) {
        value = JSON.stringify({
          name: error.name, message: error.message, stack: error.stack
        }, null, 2)
      }
      var E = '#### Error\n' + printError(value)
      if (err && err !== error) {
        value = JSON.stringify({
          name: error.name, message: error.message, stack: error.stack
        }, null, 2)
      }
      E = E + '\n#### Error\n' + printError(value)
      var vtree = h('div', { style: style1 }, [
        h('h1', sh, 'Something went wrong'),
        h('h2', sh, 'Please tell us about it in the chat so we can fix it :-)'),
        h('div', { style: style2 }, [
          h('iframe', props)
        ]),
        h('br'),
        h('span', { style: { fontWeight: 'bold' } }, [
          'Please copy <ctrl-c> & paste <ctrl-v> the error below to the chat'
        ]),
        h('xmp', { style: styleError, onclick: onclick }, E)
      ])
      engine.push(vtree)
    })
  }
}
function onclick (event) {
  try {
    var range = document.createRange()
    range.selectNode(event.target)
    window.getSelection().addRange(range);
    document.execCommand('copy')
  }
  catch (err) { console.log('Oops, unable to copy') }
}
function printError (value) {
  value = JSON.stringify(JSON.parse(value), null, 2)
  var v = ['```js']
  value.split('\n').forEach(function (line) {
    line = [].concat(line.split('\\n'))
    if (line.length > 1)
      line.forEach(function (l,i) {
        // if (i===0) v.push('  ' + l + '"')
        if (i===0) v.push('  ' + l.split('": "').join('": " [\n      "') + '",')
        else if (i===line.length-1) v.push('      "' + l + '\n    ]')
        else v.push('      "' + l + '",')
      })
    else v.push('  ' + line)
  })
  v.push('```')
  return v.join('\n')
}
