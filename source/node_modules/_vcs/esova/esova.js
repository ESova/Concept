const { h, hsvg } = require('_h')
const s           = require('_s')

const minixhr     = require('minixhr')
const auth        = require('_auth')

const header      = require('_vcs/header')
// const skilltree   = require('_vcs/skilltree')
// const agent       = require('_vcs/agent')

module.exports    = RootComponent

function RootComponent (db, engine) {

  function ACTION_signIn () { // BACKEND COMMUNICATION
    function callback (error, promocode) {
      if (error) db.put('ui/promocode', 'invalid', render)
      else db.put('esova-promocode', promocode, function (error) {
        if (error) render(error)
        else db.del('ui/promocode', function (error) {
          render(error)
        })
      })
    }

    var endpoint = 'http://45.55.222.16/github_auths/access_token'

    db.get('welcome/promocode', function (error, promocode) {
      debugger;
      if (error) return callback(error)
      var params = '?promocode='+promocode
      minixhr(endpoint+params, function (data, _, __, header) {
        // data = { validPromo: false/true, token: null/<token> }
        try {
          data = JSON.parse(data)
          if (data.validPromo) callback(null, promocode)
          else callback(new Error('no valid promo code'))
        }
        catch (e) { callback(e) }
      })
    })
  }

  var x = s(`
    esova {
      display: flex;
      flex-direction: column;
      width: 100%;
      height: 100%;
      overflow: hidden;
    }
  `)
  function mainpage (theme) {
    var x = s(`
      header {
        min-height: 165px;
        ${theme}
      }
      content {
        display: flex;
        flex-direction: row;
        justify-content: center;
        align-items: stretch;
        flex-grow: 1;
        ${theme}
      }
      footer {
        min-height: 165px;
        ${theme}
      }
    `)
    return [
      h('div', { className: x('header') }, header(db, render)),
      h('div', { className: x('content') }, content(db, engine)),
      h('div', { className: x('footer') }, footer(db, engine))
    ]
  }
  function welcome (theme) {
    var x = s(`
      promocode {
        position: absolute;
        display: flex;
        justify-content: center;
        height: 100vh;
        width: 100%;
        z-index: 10;
        background-color: hsla(0, 0%, 0%, 0.19);
      }
      welcome {
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
        align-items: center;
        box-sizing: content-box;
        background-color: red;
        width: 80%;
        min-height: 600px;
        height: 30vmax;
        min-width: 450px;
        max-width: 1200px;
        margin-top: 165px;
        padding: 50px;
        background-color: hsla(0, 0%, 0%, 0.9);
        color: white;
        font-family: arial;
        font-size: 3vmin;
      }
      promoinput {
        background-color: white;
        font-size: 3vmin;
        border: 2px dotted white;
        background: none;
        color: white;
        border-right: 0;
        text-align: center;
      }
      signin {
        color: white;
        background-color: ${'#32A971'};
        border: 0;
        padding: 3px;
        font-family: arial;
        font-size: 3vmin;
      }
      signup {
        color: white;
        background-color: ${'#32A971'};
        border: 0;
        padding: 3px;
        font-family: arial;
        font-size: 3vmin;
      }
    `)
    return [
      h('div', { className: x('promocode') }, [
        h('div', { className: x('welcome') }, [
          h('h1', 'Welcome to ESova'),
          h('h2', 'Please enter your promo code'),
          h('div', [
            h('input', {
              className: x('promoinput'),
              name: 'promocode',
              hook: function (elem) {
                setTimeout(function () { elem.focus() }, 0)
              },
              onchange: function (event) {
                db.put('welcome/promocode', event.target.value)
              },
              onkeyup: function (event) {
                var key = event.which
                if (key === 13) { // enter
                  db.put('welcome/promocode', event.target.value, ACTION_signIn)
                }
              },
              onblur: function (event) {
                // @HACK: prevent gitter chat from stealing focus
                // BETTER: replace gitter chat with white placeholder instead
                var elem = event.target
                elem.onblur = undefined
                setTimeout(function () { elem.focus() }, 50)
              },
              placeholder: 'Enter promocode'
            }),
            h('button', {
              className: x('signup'),
              onclick: ACTION_signIn,
            }, 'Unlock')
          ]),
          h('h3', 'or if you already have an account'),
          h('button', {
            className: x('signin'),
            onclick: function (event) {
              auth(db, render)
            }
          }, 'Sign In')
        ])
      ])
    ].concat(mainpage(theme))
  }
  return render
  function render (error) {

    if (error) engine.push(h('h1', 'Error - @TODO: add error message & esova gitter chat' + JSON.stringify(error)))


    else db.get('esova-promocode', function (error, promocode) {
      if (error) console.error(error)
      db.get('esova-token', function (error, token) {
        if (error) console.error(error)
        //http://45.55.222.16/github_auths/access_token?promocode=<code2>
        // you send the response  { validPromo: true }  or { validPromo: false }
        var valid = promocode || token
        db.get('ui/promocode', function (error, value) {
          var theme = valid ?
            '' : 'filter: blur(2px);\n  -webkit-filter: blur(2px);'
          theme = value ? theme+'\n background-color: red;' : theme
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
          // @TODO: get lesson from github
          // minixhr()

          // minixhr
          //
          // debugger


          // function getProfile (token, callback) {
          //   var options = {
          //     url: 'https://api.github.com/user',
          //     json: true,
          //     headers: {
          //       authorization: 'token ' + token
          //     }
          //   }
          //
          //   xhr(options, function (err, res, body) {
          //     if (err) return callback(err)
          //     callback(null, body)
          //   })
          // }
          //
          // Just make sure to catch 401 Unauthorized error on requests in case the token is no longer valid and ask the user to log in again.
          //

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
          var vtree = h('div', { className: x('esova') }, [
            valid ? mainpage(theme) : welcome(theme)
          ])
          engine.push(vtree)
        })
      })
    })
  }
}
function footer () { return '' }


/******************************************************************************
  MAIN - skillbox
******************************************************************************/
var path              = require('path')
var urify             = require('urify')

// var gitterchat        = require('_vcs/gitterchat')
/******************************************************************************
  ASSETS
******************************************************************************/
var forward           = urify(path.join(__dirname, 'forward.png'))
var forward_pressed   = urify(path.join(__dirname, 'forward-pressed.png'))
var forward_arrow     = urify(path.join(__dirname, 'forward-arrow.png'))
var forward_pressed   = urify(path.join(__dirname, 'forward-pressed.png'))
var back              = urify(path.join(__dirname, 'back.png'))
var back_pressed      = urify(path.join(__dirname, 'back-pressed.png'))
var back_arrow        = urify(path.join(__dirname, 'back-arrow.png'))
var back_pressed      = urify(path.join(__dirname, 'back-pressed.png'))

// module.exports = content

function content (db, engine) {
  var x = s(`
    skillbox {
      display: flex;
      flex-direction: column;
      min-height: 650px;
      min-width: 500px;
      width: 75%;
      max-width: 1000px;
    }
    skillbox-nav {
      display: flex;
      justify-content: center;
      margin-bottom: 20px;
    }
    skillbox-description {
      display: flex;
      flex-grow: 1;
      background-color: ${'#fff'};
      border-top-right-radius: 20px;
      border-bottom-right-radius: 20px;
      border-top-left-radius: 20px;
      border-bottom-left-radius: 20px;
    }
    navright {
      box-sizing: border-box;
      display: flex;
      align-items: center;
      justify-content: center;
      width: 60px;
      background-image: url(${forward});
      background-position: center;
      background-size: 100%;
      background-repeat: no-repeat;
    }
    navright--hover {
      background-color:red;
    }
    navleft--hover {
      background-color:red;
    }
    navleft {
      box-sizing: border-box;
      display: flex;
      align-items: center;
      justify-content: center;
      width: 60px;
      height: 60px;
      margin-right: 100px;
      background-position: center;
      background-image: url(${back});
      background-size: 100%;
      background-repeat: no-repeat;
    }
    chat {
      display: flex;
      position: relative;
      overflow: hidden;
      flex-grow: 1;
      min-width: 250px;
      margin-top: 20px;
      margin-bottom: 20px;
    }
    chatframe {
      position: absolute;
      width: 125%;
      height: 125%;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%) scale(0.8);
    }
    lesson {
      box-sizing: border-box;
      display: flex;
      flex-direction: row;
      align-items: center;
      justify-content: center;
      background-color: ${'#D6DBE1'};
      min-width: 250px;
      flex-grow: 4;
      padding: 20px;
      border-top-left-radius: 20px;
      border-bottom-left-radius: 20px;
    }
    lesson-content {
      width: 200px;
      height: 200px;

    }
  `)

  return h('div', { className: x('skillbox') }, [
    h('div', { className: x('skillbox-nav') }, [
      h('a', {
        className: x('navleft'),
        href: '#lessonY',
        onclick: function () { console.log('navleft') }
      }, [
        h('img', { className: x('navarrow'), src: back_arrow })
      ]),
      h('a', {
        className: x('navright'),
        href: '#lessonX',
        onclick: function () { console.log('navright') }
      }, [
        h('img', { className: x('navarrow'), src: forward_arrow })
      ]),
    ]),
    h('div', { className: x('skillbox-description') }, [
      h('div', { className: x('lesson') }, [
        h('div', { className: x('lesson-content') }, [
          'lorem ipsum ...'
        ])
      ]),
      // (
      //   db.put('chat', x('chat')),
      //   h('div', { className: x('chat') }, gitterchat(db, engine))
      // )
      // h('iframe', { className: x('chat'), frameBorder: '0', src: 'https://gitter.im/codingamigos/chat/~embed' })
      h('div', { className: x('chat') }, [
        h('iframe', { className: x('chatframe'), frameBorder: '0', src: 'https://gitter.im/ESova/eSovaITinfluencers/~embed' })
      ])
    ])
  ])
}
