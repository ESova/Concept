const { h, hsvg } = require('_h')
const s           = require('_s')

var githubapi     = require('_githubapi')
const minixhr     = require('minixhr')
const auth        = require('_auth')

const header      = require('_vcs/header')
const notFound    = require('_vcs/404')
// const skilltree   = require('_vcs/skilltree')
// const agent       = require('_vcs/agent')

const virtualhtml = require('virtual-html')

module.exports    = RootComponent

function RootComponent (db, engine) {

  function ACTION_signIn () { // BACKEND COMMUNICATION
    function callback (error, promocode) {
      if (error) db.put('ui/promocode', 'invalid', render)
      else db.put('esova-promocode', promocode, function (error) {
        if (error) render(error)
        else db.del('ui/promocode', function (error) {
          render(error)
        })
      })
    }
    var endpoint = 'http://45.55.222.16/github_auths/access_token'
    db.get('welcome/promocode', function (error, promocode) {
      if (error) return callback(error)
      var params = '?promocode='+promocode
      minixhr(endpoint+params, function (data, _, __, header) {
        // data = { validPromo: false/true, token: null/<token> }
        try {
          data = JSON.parse(data)
          if (data.validPromo) callback(null, promocode)
          else callback(new Error('no valid promo code'))
        }
        catch (e) { callback(e) }
      })
    })
  }
  /////////////////////////////////////////////////////////////////////////////

  function renderError (error) {
    var e = { name: error.name, message: error.message, stack: error.stack }
    db.put('error', JSON.stringify(e, null, 2), notFound(db, engine))
  }

  function render (error) {
    if (error) renderError(error)
    else db.get('esova-promocode', function (error, promocode) {
      if (error) console.error(error)
      db.get('esova-token', function (error, token) {
        if (error) console.error(error)
        var valid = promocode || token
        db.get('ui/promocode', function (error, invalid) {
          var theme = valid ?
            '' : 'filter: blur(2px);\n  -webkit-filter: blur(2px);'
          theme = !token && invalid ? theme+'\n background-color: red;' : theme
          mainpage(valid, theme, db, engine)
        })
      })
    })
  }

  function mainpage (valid, theme, db, engine) {
    var x = s(`
      esova {
        position: relative;
        display: flex;
        flex-direction: column;
        min-height: 100vh;
        width: 100%;
        background-color: ${'#526E96'};
      }
      header {
        min-height: 165px;
        ${theme}
      }
      content {
        display: flex;
        flex-direction: row;
        justify-content: center;
        align-items: stretch;
        flex-grow: 1;
        ${theme}
      }
      footer {
        min-height: 165px;
        ${theme}
      }
    `)

    function gogo (update) {
      var childTree = update.vtree
      var childName = update.name

      var vtree = h('div', { className: x('esova') }, [
        h('div', { className: x('header') }, header(db, render))
      ].concat(
        valid ?
          h('div', { className: x('content') }, childTree)
          : [
            welcome(valid, theme, db, engine),
            h('div', { className: x('content') }, childTree)
          ]
      ).concat(
        h('div', { className: x('footer') }, footer(db, engine))
      ))
      engine.push(vtree)
    }

    content (db, { push: gogo })
  }

  /////////////////////////////////////////////////////////////////////////////
  function welcome (valid, theme, db, engine) {
    var x = s(`
      promocode {
        position: absolute;
        top: 0;
        display: flex;
        flex-direction: column;
        height: 100%;
        width: 100%;
        justify-content: flex-start;
        align-items: center;
        z-index: 10;
        background-color: hsla(0, 0%, 0%, 0.19);
      }
      welcome {
        margin-top: 165px;
        display: flex;
        box-sizing: content-box;
        flex-direction: column;
        justify-content: flex-start;
        align-items: center;
        min-width: 450px;
        width: 80%;
        max-width: 1200px;
        min-height: 450px;
        height: 60%;
        padding: 50px;
        background-color: hsla(0, 0%, 0%, 0.9);
        color: white;
        font-family: arial;
        font-size: 3vmin;
      }
      promoinput {
        background-color: white;
        font-size: 3vmin;
        border: 2px dotted white;
        background: none;
        color: white;
        border-right: 0;
        text-align: center;
      }
      signin {
        color: white;
        background-color: ${'#32A971'};
        border: 0;
        padding: 3px;
        font-family: arial;
        font-size: 3vmin;
      }
      signup {
        color: white;
        background-color: ${'#32A971'};
        border: 0;
        padding: 3px;
        font-family: arial;
        font-size: 3vmin;
      }
    `)
    return [
      h('div', { className: x('promocode') }, [
        h('div', { className: x('welcome') }, [
          h('h1', 'Welcome to ESova'),
          h('h2', 'Please enter your promo code'),
          h('div', [
            h('input', {
              className: x('promoinput'),
              name: 'promocode',
              hook: function (elem) {
                setTimeout(function () { elem.focus() }, 0)
              },
              onchange: function (event) {
                db.put('welcome/promocode', event.target.value)
              },
              onkeyup: function (event) {
                var key = event.which
                if (key === 13) { // enter
                  db.put('welcome/promocode', event.target.value, ACTION_signIn)
                }
              },
              onblur: function (event) {
                // @HACK: prevent gitter chat from stealing focus
                // BETTER: replace gitter chat with white placeholder instead
                var elem = event.target
                elem.onblur = undefined
                setTimeout(function () { elem.focus() }, 50)
              },
              placeholder: 'Enter promocode'
            }),
            h('button', {
              className: x('signup'),
              onclick: ACTION_signIn,
            }, 'Unlock')
          ]),
          h('h3', 'or if you already have an account'),
          h('button', {
            className: x('signin'),
            onclick: function (event) { auth(db, render) }
          }, 'Sign In')
        ])
      ])
    ]
  }

  /////////////////////////////////////////////////////////////////////////////
  return render
}

/******************************************************************************
  MAIN - footer
******************************************************************************/
function footer () { return '' }


///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////


/******************************************************************************
  MAIN - skillbox
******************************************************************************/
var path              = require('path')
var urify             = require('urify')

// var gitterchat        = require('_vcs/gitterchat')
/******************************************************************************
  ASSETS
******************************************************************************/
var forward           = urify(path.join(__dirname, 'forward.png'))
var forward_pressed   = urify(path.join(__dirname, 'forward-pressed.png'))
var forward_arrow     = urify(path.join(__dirname, 'forward-arrow.png'))
var forward_pressed   = urify(path.join(__dirname, 'forward-pressed.png'))
var back              = urify(path.join(__dirname, 'back.png'))
var back_pressed      = urify(path.join(__dirname, 'back-pressed.png'))
var back_arrow        = urify(path.join(__dirname, 'back-arrow.png'))
var back_pressed      = urify(path.join(__dirname, 'back-pressed.png'))
var playicon          = urify(path.join(__dirname, 'play-icon.png'))

// module.exports = content

var markdownStyles = document.createElement('style')
markdownStyles.innerHTML = `
  .markdown {
    padding: 5px;
  }
`
document.head.appendChild(markdownStyles)
function content (db, engine) {

  var lightbluegrey = '#D6DBE1'
  var esovadarkgreen = '#32A971'
  var esovagreen = '#35E38A'


  var x = s(`
    skillbox {
      display: flex;
      flex-direction: column;
      min-height: 450px;
      min-width: 600px;
      width: 75%;
      max-width: 1000px;
    }
    skillbox-nav {
      display: flex;
      justify-content: center;
      margin-bottom: 20px;
    }
    skillbox-description {
      display: flex;
      flex-grow: 1;
      background-color: ${'#fff'};
      border-top-right-radius: 20px;
      border-bottom-right-radius: 20px;
      border-top-left-radius: 20px;
      border-bottom-left-radius: 20px;
    }
    navright {
      box-sizing: border-box;
      display: flex;
      align-items: center;
      justify-content: center;
      width: 60px;
      height: 60px;
      background-position: center;
      background-image: url(${forward});
      background-size: 100%;
      background-repeat: no-repeat;
    }
    navright--hover {
      background-color:red;
    }
    navleft--hover {
      background-color:red;
    }
    navleft {
      box-sizing: border-box;
      display: flex;
      align-items: center;
      justify-content: center;
      width: 60px;
      height: 60px;
      margin-right: 100px;
      background-position: center;
      background-image: url(${back});
      background-size: 100%;
      background-repeat: no-repeat;
    }
    chat {
      display: flex;
      position: relative;
      overflow: hidden;
      flex-grow: 1;
      min-width: 300px;
      margin-top: 20px;
      margin-bottom: 20px;
    }
    chatframe {
      position: absolute;
      width: 125%;
      height: 125%;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%) scale(0.8);
    }
    chat-disabled {
      padding: 10px;
      font-family: arial;
      font-size: 15px;
      position: absolute;
      display: flex;
      flex-direction: column;
      width: 100%;
      justify-content: center;
      text-align: center;
      bottom: 0;
      height: 90px;
      background-color: white;
      z-index: 1;
    }
    lesson {
      font-family: ${'Avenir Roman'};
      box-sizing: border-box;
      display: flex;
      flex-direction: column;
      align-content: stretch;
      align-items: stretch;
      justify-content: center;
      background-color: ${lightbluegrey};
      min-width: 300px;
      flex-grow: 4;
      padding: 20px;
      border-top-left-radius: 20px;
      border-bottom-left-radius: 20px;
    }
    lesson-header {
      align-items: flex-start;
      display: flex;
      flex-direction: row;
      flex-wrap: wrap;
      min-width: 300px;
    }
    lesson-title {
      color: ${esovagreen};
      margin-right: auto;
    }
    lessonstart {
      border-radius: 15px;
      padding: 3px;
      padding-left: 15px;
      padding-right: 15px;
      align-self: center;
      white-space: nowrap;
      justify-content: flex-end;
      text-decoration: none;
      background-color: ${esovagreen};
      border: 1px solid ${esovadarkgreen};
      color: white;
    }
    lessonstart--hover {
      background-color: ${esovadarkgreen};
      border: 1px solid ${esovagreen};
    }
    lesson-seperator {
      border: 0.5pt solid white;
      width: 100%;
    }
    lesson-content {
      color: white;
      font-size: 1em;
    }
  `)

  var api = githubapi(db)
  var action = 'getlesson'

  var STATE = {
    lessonstart: undefined
  }
  function onmouseover (event) {
    var key = this
    db.put(key, key+'--hover', engine)
    STATE = {}
    STATE[key] = key+'--hover' // @HACK
    rerender()
  }
  function onmouseout (event) {
    var key = this
    db.del(key, engine)
    STATE = {}
    STATE[key] = undefined // @HACK
    rerender()
  }

  rerender()

  function rerender () {
    api(action, function (error, data) {
      if ((error||{}).status === 401) alert("log in again")
      else if (error) renderError(error)
      else {
        var title = data.title
        var content = '<div class="'+x('markdown')+'">'+
          data.__content__+'</div>'
        virtualhtml(content, function (error, lesson) {
          if (error) renderError(error)
          else renderSkillboxVtree(title, lesson)
        })
      }
    })
  }


  function renderSkillboxVtree(title, lesson) {
    // @TODO: set by parent through subEngine
    db.get('esova-token', function (error, token) {
      db.get('esova-currentLesson', function (error, number) {
        if (error) renderError(error)
        else engine.push({
          name: 'skillbox',
          vtree: getSkillboxVtree(token, title, lesson, +number)
        })
      })
    })
    // function b64_to_utf8 ( str ) {
    //   str = str.replace(/(\r\n|\n|\r)/gm,"");
    //   return decodeURIComponent(escape(window.atob( str )));
    // }
  }


  function getSkillboxVtree (token, title, lesson, number) {
    var vtree = h('div', { className: x('skillbox') }, [
      h('div', { className: x('skillbox-nav') }, [
        number === 0 ? '' : h('a', {
          className: x('navleft'),
          // href: '#lessonY', // @TODO: fix url
          onclick: function () {
            number--
            db.put('esova-currentLesson', number, function (error) {
              if (error) render(error)
              else rerender()
            })
          }
        }, [
          h('img', { className: x('navarrow'), src: back_arrow })
        ]),
        h('a', {
          className: x('navright'),
          // href: '#lessonX', // @TODO: fix url
          onclick: function () {
            number++
            db.put('esova-currentLesson', number+'', function (error) {
              if (error) render(error)
              else rerender()
            })
          }
        }, [
          h('img', { className: x('navarrow'), src: forward_arrow })
        ]),
      ]),
      h('div', { className: x('skillbox-description') }, [
        h('div', { className: x('lesson') }, [
          h('div', { className: x('lesson-header') }, [
            h('h1', { className: x('lesson-title') }, title),
            h('a', {
              className: x('lessonstart', STATE.lessonstart),
              onmouseover: onmouseover.bind('lessonstart'),
              onmouseout: onmouseout.bind('lessonstart'),
              href: '/#lesson'}, [
              h('img', { src: playicon, style: `margin-right: 10px;` }),
              'Start Lesson'
            ])
          ]),
          h('hr', { className: x('lesson-seperator')}),
          h('div', { className: x('lesson-content') + '  markdown'}, lesson)
        ]),
        h('div', { className: x('chat') }, (function (thechat) {
          if (!token) thechat.push(h('div', {
            className: x('chat-disabled')
          },'Complete the first 4 lessons and then signup before you can chat'))
          thechat.push(h('iframe', { className: x('chatframe'), frameBorder: '0', src: 'https://gitter.im/ESova/eSovaITinfluencers/~embed' }))
          return thechat
        })([]))
      ])
    ])
    return vtree
  }
}
