'use strict'
/******************************************************************************
  STACK BASE
******************************************************************************/
const { h, hsvg } = require('_h')
const s           = require('_s')
/******************************************************************************
  STACK EXTEND
******************************************************************************/
var path          = require('path')
var urify         = require('urify')
/******************************************************************************
  CUSTOM
******************************************************************************/
const auth      = require('_auth')
/******************************************************************************
  ASSETS
******************************************************************************/
var owl = urify(path.join(__dirname, 'owl.png'))
var owlbase = urify(path.join(__dirname, 'owlbase.png'))
var blocks = urify(path.join(__dirname, 'blocks.png'))
var logout = urify(path.join(__dirname, 'logout.png'))
var chat = urify(path.join(__dirname, 'messages.png'))
var chatSelected = urify(path.join(__dirname, 'messages-selected.png'))
var skillbox = urify(path.join(__dirname, 'skillmap.png'))
var skillboxSelected = urify(path.join(__dirname, 'skillmap-selected.png'))
var settings = urify(path.join(__dirname, 'settings.png'))
/******************************************************************************
  MAIN
******************************************************************************/
module.exports    = header

function header (db, engine) {


  /*****************************/
  // THEME + LOCAL CACHE + DEFAULT VALUES
  var esovadarkgreen = '#32A971'
  var esovagreen = '#35E38A'
  var esovablue = '#526E96'
  var STATE = { } // @HACK UI STATE'
  var CREDS = {}

  /*****************************/
  // INITIALIZE STYLING
  var x = s(`
    header {
      display: flex;
      margin-top: 40px;
      justify-content: center;
    }
    menubar {
      box-sizing: border-box;
      position: relative;
      display: flex;
      border-radius: 50px;
      height: 85px;
      justify-content: space-between;
      align-items: center;
      background-color: ${'#fff'};
      min-width: 900px;
      max-width: 1200px;
      width: 90%;
    }
    logo {
      box-sizing: border-box;
      position: relative;
      top: 2%;
      display: flex;
      justify-content: center;
      margin-left: 175px;
      align-items: center;
      width: 265px;
      min-width: 265px;
      height: 150px;
      padding-left: 55px;
      padding-right: 60px;
    }
    logo-owl {
      z-index: 3;
    }
    logo-owlbase {
      position: absolute;
      top: 1%;
      left: 21.5%;
      z-index: 1;
    }
    logo-blocks {
      position: absolute;
      top: 5%;
      left: 8%;
      height: 130px;
      width: 235px;
      z-index: 2;
    }

    usernav {
      display: flex;
      justify-content: space-between;
      align-items: center;
      height: 85px;
      margin-left: auto;
      flex-grow: 1;
      border-top-right-radius: 50px;
      border-bottom-right-radius: 50px;
      border-left: 2px solid ${esovadarkgreen};
      background-color: ${esovagreen};
    }
    esovanav {
      display: flex;
      justify-content: space-around;
      align-items: center;
      height: 85px;
      flex-grow: 1;
      margin-right: auto;
      border-top-left-radius: 50px;
      border-bottom-left-radius: 50px;
    }

    skillbox {
      padding: 15px;
    }
    skillbox--hover {
      background-image: url(${skillboxSelected});
      background-position: center;
      background-repeat: no-repeat;
    }
    skillbox-link { }

    chat {
      padding: 15px;
    }
    chat--hover {
      background-image: url(${chatSelected});
      background-position: center;
      background-repeat: no-repeat;
    }
    chat-link { }

    noprofile {
      display: flex;
      justify-content: space-around;
      padding: 8px;
      margin-left: 65px;
      width: 80px;
      border-radius: 50px;
    }
    profile {
      display: flex;
      justify-content: space-around;
      padding: 8px;
      margin-left: 25px;
      background-color: hsla(0, 0%, 0%, 0.15);
      width: 80px;
      border-radius: 50px;
    }
    logout { }
    settings { }
    logout-link { }
    settings-link { }

    avatar {
      display: flex;
      flex-direction: row;
      align-items: center;
    }
    noavatar {
      color: white;
      display: flex;
      flex-direction: row;
      align-items: center;
      cursor: pointer;
    }
    avatar-image {
      width: 65px;
      height: 65px;
      border-radius: 50px;
      box-shadow: -10px 10px 30px -20px #000;
      border: 5px white solid;
      margin-right: 7px;
      background-color: #eee;
    }
    avatar-name {
      margin-right: 10px;
      font-size: 18px;
      font-family: ${'Avenir Roman'};
    }
    noavatar--hover {
      color: ${esovablue};
    }
  `)


  /*****************************/
  // CHILD COMPONENTS & USED MODULES
  // ...


  /*****************************/
  // RENDER COMPONENT
  function renderHeader (credentials) {
    return h('div', { className: x('header') }, [
      h('div', { className: x('menubar') }, [
        h('div',{ className: x('esovanav') }, [
          h('a', {
            onmouseover: onmouseover.bind('skillbox'),
            onmouseout: onmouseout.bind('skillbox'),
            onclick: go2currentlesson,
            className: x('skillbox', STATE.skillbox), href: '/' }, [
            h('img', { className: x('skillbox-link'), src: skillbox })
          ]),
          h('a', {
            onmouseover: onmouseover.bind('chat'),
            onmouseout: onmouseout.bind('chat'),
            className: x('chat', STATE.chat),
            href: 'https://gitter.im/ESova/program/', target: '_blank' }, [
            h('img', { className: x('chat-link'), src: chat })
          ])
        ]),
        h('div', { className: x('logo') }, [
          h('img', { className: x('logo-owl'), src: owl }),
          h('img', { className: x('logo-owlbase'), src: owlbase }),
          h('img', { className: x('logo-blocks'), src: blocks })
        ]),
        // @TODO: replace with user credentials
        credentials ? loggedIn() : loggedOut('Mrs. eSova', owl)
      ])
    ])
    function loggedOut () {
      return h('div', { className: x('usernav') }, [
        h('div', { className: x('noprofile') }, [
          ''
        ]),
        h('div', {
          className: x('noavatar', STATE['noavatar']),
          onmouseover: onmouseover.bind('noavatar'),
          onmouseout: onmouseout.bind('noavatar'),
          onclick: onsignin
        }, [
          h('div', { className: x('avatar-name') }, 'Sign In'),
          h('img', { className: x('avatar-image'), src: owl })
        ])
      ])
    }
    function loggedIn (username, useravatar) {
      return h('div', { className: x('usernav') }, [
        h('div', { className: x('profile') }, [
          h('a', {
            className: x('logout'),
            href: '#logout',
            onclick: onlogout
          }, [
            h('img', { className: x('logout-link'), src: logout })
          ]),
          h('a', {
            className: x('settings'),
            href: 'https://github.com/settings/profile', target: '_blank'
          }, [
            h('img', { className: x('settings-link'), src: settings })
          ]),
        ]),
        h('div', { className: x('avatar') }, [
          h('div', { className: x('avatar-name') }, username),
          h('img', { className: x('avatar-image'), src: useravatar })
        ])
      ])
    }
  }


  /*****************************/
  // INCOMING COMMUNICATION CHANNELS
  db.on('put', function (key, value) {
    if (key === 'esova-credentials') { // LISTEN TO
      debugger
      if (CREDS.id !== value.id) engine.push({ // ACT ON CHANGE
        type: 'vtree',
        key: 'header',
        value: renderHeader(CREDS.id = value.id) // UPDATE CACHE
      })
    }
  })


  /*****************************/
  // INITIALIZE
  console.log('--------------------------------')
  console.log('INITIALIZE: header() component')
  console.log('--------------------------------')
  db.get('esova-credentials', function (error, credentials) {
    CREDS.id = (credentials||{}).id
    engine.push({
      type: 'vtree',
      key: 'header',
      value: renderHeader(CREDS.id)
    })
  })


  /*****************************/
  // HELPER
  function go2currentlesson (event) {
    event.preventDefault()
    db.get('esova-currentLesson', function (error, value) {
      if (error) value = '0'
      db.put('esova-lesson', value, function noop () { })
    })
  }
  function onsignin (event) {
    event.preventDefault()
    auth(db, function noop (error, help) { })
    // auth will do db.put('esova-credentials'...)
    // @TODO:
    // this is what it might tell in 'help'
    // ... but it's an open question what is the best communication architecture
  }
  function onlogout (event) {
    event.preventDefault()
    CREDS = {}
    debugger
    db.del('esova-credentials', function () {
      debugger
      db.put('target', '/', function () {
        debugger
        console.log('LOGGED OUT')
      })
    })
  }
  function onmouseover (event) {
    var key = this
    STATE[key] = key+'--hover' // is that ok? should it be db.put?
    engine.push({
      type: 'vtree',
      key: 'header',
      value: renderHeader(CREDS.id)
    })
  }
  function onmouseout (event) {
    var key = this
    STATE[key] = undefined //  // is that ok? should it be db.put?
    engine.push({
      type: 'vtree',
      key: 'header',
      value: renderHeader(CREDS.id)
    })
  }
}
