'use strict'
/******************************************************************************
  STACK BASE
******************************************************************************/
const { h, hsvg } = require('_h')
const s           = require('_s')
/******************************************************************************
  STACK EXTEND
******************************************************************************/
const minixhr     = require('minixhr')
/******************************************************************************
  CUSTOM
******************************************************************************/
var video        = require('_vcs-videoplayer')
var githubapi     = require('_githubapi')
// const auth        = require('_auth')
// const header      = require('_vcs/header')
/******************************************************************************
  MAIN
******************************************************************************/
module.exports    = LessonComponent

function LessonComponent (db, engine) {


  /*****************************/
  // THEME + LOCAL CACHE + DEFAULT VALUES
  var STATUS = {
    video: undefined,
    slides: []
  }


  /*****************************/
  // INITIALIZE STYLING - @TODO: maybe styling initialization is harmless
  var x = s(`
    lesson {
      background-color: red;
    }
    videopopup {
      position: relative;
      top: 165px;
      margin: 0 auto;
      width: 500px;
      height: 500px;
      opacity: 0.5;
      z-index: 1;
    }
    videopopup-question {
      background-color: green;
    }
    videopopup-solution {
      background-color: red;
    }
    videopopup-challenge {
      background-color: blue;
    }
  `)


  /*****************************/
  // CHILD COMPONENTS & USED MODULES
  var api = githubapi(db)


  /*****************************/
  // RENDER COMPONENT
  function renderLesson () {
    // MAYBE UPDATE CHILDREN
    // ---

    // SELECT CHILDREN
    // ---

    // PREPARE

    // <iframe src="http://fast.video.net/embed/iframe/rmhd84p5to?videoFoam=true" allowtransparency="true" frameborder="0" scrolling="no" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width="640" height="360" videoFoam=true"></iframe>

    // <div class="wistia_embed wistia_async_rmhd84p5to" style="width:640px;height:360px;" videoFoam=true"></div>

    // @TODO @NOTE: when at lesson 4 end for signin => set currentLesson to 5

    // RENDER
    var vtree = h('div', { className: x('lesson') }, [
      // @TODO: put into normal vcs component format
      video(STATUS.video, { protocol: 'http:' }, function (video) {
        video.play()
        video.bind("end", function() {
          console.log('video ended')
        })
        video.bind("secondchange", function() {
          var currentsecond = Math.floor(video.time())
          STATUS.currentsecond = currentsecond
          var minute = Math.floor(currentsecond/60)
          var second = currentsecond % 60
          var timekey = minute+':'+second
          var slides = STATUS.times[timekey]
          if (slides) {
            video.pause()
            var slide = slides.shift()
            show(slide, function next () {
              var slide = slides.shift()
              if (slide) show(slide, next)
              else video.play()
            })

          }
        })
      })
    ])
    // PUSH UPDATE
    engine.push({
      type: 'vtree',
      key: 'lesson',
      value: vtree
    })
  }

  /*****************************/
  // INCOMING COMMUNICATION CHANNELS
  db.on('put', function (key, value) {
    if (key === 'MODE') {
      if (value === 'lesson') {
        helper() // fetch lesson content into "esova-lessonContent"
      }
      else {
        // basically ignore for now
      }
    }
    else if (key === 'esova-lessonContent') {
      STATUS.video = value.video
      STATUS.slides = value.slides
      STATUS.times = {}
      STATUS.slides.forEach(function (slide) {
        var time = slide.time
        STATUS.times[time] = STATUS.times[time] || []
        STATUS.times[time].push(slide)
      })
      STATUS.currentsecond = 0
      renderLesson()
    }
  })


  /*****************************/
  // INITIALIZE - @TODO: maybe initialization should always be triggered
  console.log('--------------------------------')
  console.log('INITIALIZE: lesson() component')
  console.log('--------------------------------')


  /*****************************/
  // HELPER
  function helper () {
    api('getLessonContent', function (error, content) {
      if ((error||{}).status === 401)
        db.put('ERROR', 'api getlessondescription 401 access denied', ER)
      else db.put('esova-lessonContent', content, function (error) {
        if (error) db.put('ERROR', new Error('couldnt set lesson content'))
      })
    })
  }
  function ER (error) {
    // @TODO
    // default error logging failed
    // => try to learn about error via ajax or some other technique
    // => if it fails inform user instead and hope he reports it in chat
    if (error) {
      console.error('couldnt store ERROR event')
      console.error(error)
    }
  }

  var TYPE = {
    'question': renderQuestion,
    'challenge': renderChallenge,
    'solution': renderSolution
  }

  function show (slide, next) {
    var vtree = TYPE[slide.type](slide, next)
    engine.push({
      type: 'vtree',
      key: 'videopopup',
      value: vtree
    })
  }

  function renderQuestion (slide, next) {

    var vtree = h('div', { className: x('videopopup') }, [
      h('div', { className: x('videopopup-question')}, [
        JSON.stringify(slide)
      ])
    ])
    return vtree
  }
  function renderChallenge (slide, next) {

    var vtree = h('div', { className: x('videopopup') }, [
      h('div', { className: x('videopopup-challenge')}, [
        JSON.stringify(slide)
      ])
    ])
    return vtree
  }
  function renderSolution (slide, next) {

    var vtree = h('div', { className: x('videopopup') }, [
      h('div', { className: x('videopopup-solution')}, [
        JSON.stringify(slide)
      ])
    ])
    return vtree
  }
}
