'use strict'
/******************************************************************************
  STACK BASE
******************************************************************************/
const { h, hsvg } = require('_h')
const s           = require('_s')
/******************************************************************************
  STACK EXTEND
******************************************************************************/
const minixhr     = require('minixhr')
/******************************************************************************
  CUSTOM
******************************************************************************/
var wistia        = require('_vcs-videoWistia')
var githubapi     = require('_githubapi')
// const auth        = require('_auth')
// const header      = require('_vcs/header')
/******************************************************************************
  MAIN
******************************************************************************/
module.exports    = LessonComponent

function LessonComponent (db, engine) {


  /*****************************/
  // THEME + LOCAL CACHE + DEFAULT VALUES
  var STATUS = {
    video: undefined,
    slides: []
  }


  /*****************************/
  // INITIALIZE STYLING - @TODO: maybe styling initialization is harmless
  var x = s(`
    lesson {
      background-color: red;
    }
  `)


  /*****************************/
  // CHILD COMPONENTS & USED MODULES
  var api = githubapi(db)


  /*****************************/
  // RENDER COMPONENT
  function renderLesson () {
    // MAYBE UPDATE CHILDREN
    // ---

    // SELECT CHILDREN
    // ---

    // PREPARE

    // <iframe src="http://fast.wistia.net/embed/iframe/rmhd84p5to?videoFoam=true" allowtransparency="true" frameborder="0" scrolling="no" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width="640" height="360" videoFoam=true"></iframe>

    // <div class="wistia_embed wistia_async_rmhd84p5to" style="width:640px;height:360px;" videoFoam=true"></div>


    // RENDER
    var vtree = h('div', { className: x('lesson') }, [
      // @TODO: put into normal vcs component format
      wistia(STATUS.video, { protocol: 'http:' }, function (video) {
        debugger
        console.log("I got a handle to the video!", video)
      })
      // h('iframe', {
      //   src: '//fast.wistia.net/embed/iframe/' + STATUS.video,
      //   className: 'wistia_embed',
      //   hook: function (node) {
      //     wistia(STATUS.video, function (video) {
      //       debugger
      //       console.log("I got a handle to the video!", video)
      //     })
      //   }
      // })
    ])
    // PUSH UPDATE
    engine.push({
      type: 'vtree',
      key: 'lesson',
      value: vtree
    })
  }

  /*****************************/
  // INCOMING COMMUNICATION CHANNELS
  db.on('put', function (key, value) {
    if (key === 'MODE') {
      if (value === 'lesson') {
        helper() // fetch lesson content into "esova-lessonContent"
      }
      else {
        // basically ignore for now
      }
    }
    else if (key === 'esova-lessonContent') {
      STATUS.video = value.video
      STATUS.slides = value.slides
      renderLesson()
    }
  })


  /*****************************/
  // INITIALIZE - @TODO: maybe initialization should always be triggered
  console.log('--------------------------------')
  console.log('INITIALIZE: lesson() component')
  console.log('--------------------------------')


  /*****************************/
  // HELPER
  function helper () {
    api('getLessonContent', function (error, content) {
      if ((error||{}).status === 401)
        db.put('ERROR', 'api getlessondescription 401 access denied', ER)
      else db.put('esova-lessonContent', content, function (error) {
        if (error) db.put('ERROR', new Error('couldnt set lesson content'))
      })
    })
  }
  function ER (error) {
    // @TODO
    // default error logging failed
    // => try to learn about error via ajax or some other technique
    // => if it fails inform user instead and hope he reports it in chat
    if (error) {
      console.error('couldnt store ERROR event')
      console.error(error)
    }
  }
}
