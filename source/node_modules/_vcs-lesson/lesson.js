'use strict'
/******************************************************************************
  STACK BASE
******************************************************************************/
const { h, hsvg } = require('_h')
const s           = require('_s')
/******************************************************************************
  STACK EXTEND
******************************************************************************/
const minixhr     = require('minixhr')
const defined     = require('defined')
/******************************************************************************
  CUSTOM
******************************************************************************/
var video         = require('_vcs-videoplayer')
var githubapi     = require('_githubapi')
/******************************************************************************
  MAIN
******************************************************************************/
module.exports    = LessonComponent

function LessonComponent (db, engine) {

  /*****************************/
  // THEME + LOCAL CACHE + DEFAULT VALUES
  var esovablue = '#526E96'
  var esovadarkblue = '#16243a'
  var esovalightblue = '#edf2fa'
  var esovalightgreen = '#35E38A'
  var esovared = 'FA9B68'
  var esovapink = '#E44663'
  var esovafont1 = 'Avenir Roman'
  var STATUS = {
    video: undefined,
    slides: []
  }


  /*****************************/
  // INITIALIZE STYLING - @TODO: maybe styling initialization is harmless
  var x = s(`
    lesson {
      position: relative;
      background: linear-gradient(to bottom, ${'#223857'} 0%,${'#466697'} 100%);
      display: flex;
      flex-direction: column;
      align-items: center;
      width: 100%;
      min-height: 100%;
      overflow: hidden;
    }
    lesson-bottom {
      position: absolute;
      width: 100%;
      min-height: 100%;
      background-color: ${esovadarkblue};
      box-shadow: 0px 110px 35px 100px hsla(0, 0%, 0%, 0.75);
      z-index: 1;
    }
    close-button {
      position: absolute;
      right: 2px;
      top: 2px;
      width: 35px;
      background-color: ${esovapink};
      color: white;
      font-size: 18px;
      border-radius: 15px;
      border: 0;
      font-family: ${esovafont1};
      cursor: pointer;
    }
    video-container {
      background-color: black;
      position: relative;
      min-width: 600px;
      min-height: 340px;
      width: 60vw;
      height: 34vw;
    }
    videopopup {
      position: relative;
      top: 165px;
      margin: 0 auto;
      min-width: 600px;
      min-height: 340px;
      width: 60vw;
      height: 34vw;
      z-index: 1;
      color: ${esovalightgreen};
      font-family: ${esovafont1};
    }
    video-background {
      position: absolute;
      width: 100%;
      height: 100%;
      background-color: ${esovadarkblue};
      opacity: 0.98;
      z-index: -1;
    }


    videopopup-question {
      display: flex;
      flex-direction: column;
      align-items: center;
    }
    videopopup-solution {
      display: flex;
      flex-direction: column;
      align-items: center;
    }
    videopopup-challenge {
      display: flex;
      flex-direction: column;
      align-items: center;
    }
    number {
      display: flex;
      justify-content: center;
      align-items: center;
      margin-top: 30px;
      border: 2px solid white;
      height: 60px;
      width: 60px;
      border-radius: 50%;
      color: white;
      font-size: 20px;
    }
    question {
      padding: 30px 0 30px 0;
      border-bottom: 2px solid ${esovalightgreen};
    }
    answers {
      display: flex;
      flex-flow: row wrap;
      padding: 0px 100px 0px 100px;
    }
    option {
      display: flex;
      width: 50%;
      padding: 40px 0px 25px 0px;
    }
    optionanswer {
      padding-left: 10px;
      color: white;
    }
  `)


  /*****************************/
  // CHILD COMPONENTS & USED MODULES
  var api = githubapi(db)


  /*****************************/
  // RENDER COMPONENT
  function renderLesson () {
    // MAYBE UPDATE CHILDREN
    // ---

    // SELECT CHILDREN
    // ---

    // PREPARE

    // <iframe src="http://fast.video.net/embed/iframe/rmhd84p5to?videoFoam=true" allowtransparency="true" frameborder="0" scrolling="no" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width="640" height="360" videoFoam=true"></iframe>

    // <div class="wistia_embed wistia_async_rmhd84p5to" style="width:640px;height:360px;" videoFoam=true"></div>

    // @TODO @NOTE: when at lesson 4 end for signin => set currentLesson to 5

    // RENDER
    var vtree = h('div', { className: x('lesson') }, [
      h('div', { className: x('video-container') }, [
        h('button', {
          className: x('close-button'),
          onclick: function (event) { db.put('MODE', 'skillbox', ER) }
        }, 'x'),
        // @TODO: put into normal vcs component format
        video(STATUS.video, { protocol: 'http:' }, function (video) {
          video.play()
          video.bind("end", function() {
            console.log('video ended')
          })
          video.bind("secondchange", function() {
            var currentsecond = Math.floor(video.time())
            STATUS.currentsecond = currentsecond
            var minute = Math.floor(currentsecond/60)
            var second = currentsecond % 60
            var timekey = minute+':'+second
            var slides = STATUS.times[timekey]
            if (slides) {
              video.pause()
              var slide = slides.shift()
              show(slide, STATUS.lesson||'0', function next () {
                var slide = slides.shift()
                if (slide) show(slide, STATUS.lesson||'0', next)
                else video.play()
              })
            }
          })
        })
      ]),
      h('div', { className: x('lesson-bottom') })
    ])
    // PUSH UPDATE
    engine.push({
      type: 'vtree',
      key: 'lesson',
      value: vtree
    })
  }


  /*****************************/
  // INCOMING COMMUNICATION CHANNELS
  db.on('put', function (key, value) {
    try { value = JSON.parse(value) } catch (e) { value = defined(value, {}) }

    if (key === 'MODE') {
      if (value === 'lesson') {
        helper() // fetch lesson content into "esova-lessonContent"
      }
      else {
        // basically ignore for now
      }
    }
    else if (key === 'esova-lessonContent') {
      STATUS.video = value.video
      STATUS.slides = value.slides
      STATUS.times = {}
      STATUS.slides.forEach(function (slide) {
        var time = slide.time
        STATUS.times[time] = STATUS.times[time] || []
        STATUS.times[time].push(slide)
      })
      STATUS.currentsecond = 0
      db.get('esova-lesson', function (error, lesson) {
        STATUS.lesson = lesson
        renderLesson()
      })
    }
  })


  /*****************************/
  // INITIALIZE - @TODO: maybe initialization should always be triggered
  console.log('--------------------------------')
  console.log('INITIALIZE: lesson() component')
  console.log('--------------------------------')


  /*****************************/
  // HELPER
  function helper () {
    api('getLessonContent', function (error, content) {
      if ((error||{}).status === 401)
        db.put('ERROR', 'api getlessondescription 401 access denied', ER)
      else db.put('esova-lessonContent', content, function (error) {
        if (error) db.put('ERROR', new Error('couldnt set lesson content'))
      })
    })
  }
  function ER (error) {
    // @TODO
    // default error logging failed
    // => try to learn about error via ajax or some other technique
    // => if it fails inform user instead and hope he reports it in chat
    if (error) {
      console.error('couldnt store ERROR event')
      console.error(error)
    }
  }

  var TYPE = {
    'question': renderQuestion,
    'challenge': renderChallenge,
    'solution': renderSolution
  }

  function show (slide, lesson, next) {
    var vtree = TYPE[slide.type](slide, next)
    engine.push({
      type: 'vtree',
      key: 'videopopup',
      value: h('div', { className: x('videopopup') }, [
        h('div', { className: x('video-background') }),
        vtree
      ])
    })
  }

  function renderQuestion (slide, next) {
    var vtree = h('div', { className: x('videopopup-question')}, [
      h('div', { className: x('number')}, ['01'] ),
      h('div', { className: x('question')}, [slide.question] ),
      h('div', { className: x('answers')}, [
        h('div', { className: x('option') }, [
          h('input', { type: 'checkbox', name: 'option1', className: x('optioncheckbox'), value: slide.options[0] }),
          h('div', { className: x('optionanswer') }, [slide.options[0]])
        ]),
        h('div', { className: x('option') }, [
          h('input', { type: 'checkbox', name: 'option2', className: x('optioncheckbox'), value: slide.options[1] }),
          h('div', { className: x('optionanswer') }, [slide.options[1]])
        ]),
        h('div', { className: x('option') }, [
          h('input', { type: 'checkbox', name: 'option3', className: x('optioncheckbox'), value: slide.options[2] }),
          h('div', { className: x('optionanswer') }, [slide.options[2]])
        ]),
        h('div', { className: x('option') }, [
          h('input', { type: 'checkbox', name: 'option4', className: x('optioncheckbox'), value: slide.options[3] }),
          h('div', { className: x('optionanswer') }, [slide.options[3]])
        ])
      ])
    ])
    return vtree
  }
  function renderChallenge (slide, next) {
    var vtree = h('div', { className: x('videopopup-challenge')}, [
      JSON.stringify(slide)
    ])
    return vtree
  }
  function renderSolution (slide, next) {
    var vtree = h('div', { className: x('videopopup-solution')}, [
      JSON.stringify(slide)
    ])
    return vtree
  }
}
